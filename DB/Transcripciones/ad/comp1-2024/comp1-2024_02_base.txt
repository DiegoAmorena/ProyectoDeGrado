 Vamos a comenzar entonces con la clase de hoy, con la clase 2 del curso de computación 1. Como la clase pasada, vamos a seguir familiarizándonos con la herramienta que vamos a usar de trabajo, la computadora, la clase pasada nos entramos en arquitectura, entender un poco cuáles son las partes más importantes de una computadora y algunas cosas como bastantes generales de funcionamiento, como les dije, la clase pasada, arquitectura del computador, es un curso que de una un semestre en la carrera computación, eléctrica tiene una asignatura parecida y también dura por lo menos un semestre. Obviamente que lo querimos es son grandes pinceladas para que tengan una idea de cómo funciona computadora. Hoy nos vamos a mover un paso más arriba, nosotros estuvimos hablando del hardware, los fierros, y ahora vamos a hablar de los sistemas operativos. Nosotros vamos a trabajar después con lenguajes de programación sobre los que vamos a programar, que todavía van a estar más arriba en esta especie de capas, en las que vemos como la computadora, como interactúan la computadora con los programas. Bien, entonces lo primero que vamos, como decía, arquitectura, es un curso que dura un semestre, el sistema operativo, es otro curso que dura un semestre, se ven un montón de temas. La idea acá es entender un poco a nivel diusuario que viene a significar un sistema operativo y por qué es importante la existencia de sistemas operativos? Entonces vamos a ver como una especie de definición de lo que sería un sistema operativo. O sea, qué es lo que hacen, digamos. Son aquellos que gestionan y coordinan el uso de los recursos del equipo haciendo que los detalles particulares del hardware sean transparentes para las aplicaciones. Y de alguna forma es un intermediario entre los programas y el hardware que es el que tiene los recursos. Capas que yo menciono esto y les suena como algo superraro, dicen por qué es tan importante esto de los sistemas operativos. Bueno, voy a mencionar qué tipo de recursos son los que gestionan y ahora voy a poner algunos ejemplos de por qué esto es útil. Bueno, qué recursos son los que manejan la memoria RAM, el procesador, la captura y el display de información? O sea, cuando yo toco el teclado y eso aparece en la pantalla. La captura es lo que hace cuando yo escribo en el teclado y el display de información es lo que hace cuando me muestran la pantalla. Bueno, el manejo de los medios externos, en los que pueda grabar datos, la conexión de red, y cualquier otra cosa así general que tenga que ver con el hardware de la computadora. ¿Por qué esto es útil? ¿Por qué esto ha servido para de alguna forma masificar la computación y simplificarla? Para mí el ejemplo es más sencillo para que entiendan eso tiene que ver con los celulares. O sea, la mayoría de las personas hoy tenemos un celular inteligente que tiene el sistema Android o el sistema iOS y si ustedes piensan, piensen que termían los cursos, hacen todo, no sé, termían haciendo asignaturas de computación y termían siendo desarrolladores de aplicaciones para celular. Cuando uno tiene que hacer eso, piensen en la cantidad de aparatos distintos que hay hoy en día. O sea, hay, bueno, si estamos trabajando con celulares, Apple no porque básicamente es el mismo fabricante y son todos medios parecidos, aunque hay un montón de modelos distintos, pero si uno quiere hacer una aplicación que funcione en celulares Android, tiene para empezar no sé, 20 fabricantes, 30 fabricantes distintos, deselulares, las marcas que se les ocurran Samsung, este Motorola, las que quieran considerar. Y después, dentro de esas marcas, hay un montón de modelos distintos. Si yo no tuviera una entidad que de alguna forma me astraiga el hardware, me permita, por ejemplo, decirle, sacar una foto. No sé piensen en el que hizo el que desarrolló Instagram para celulares. El que desarrolló esa aplicación tendría que saber cómo sacar una foto en todos los modelos de celulares de todos los fabricantes de celulares posible. Entonces, eso sería una tarea prácticamente inabordable. Estaría todo el tiempo haciendo ajuste, oh, salió un modelo nuevo, tengo que reprogramar la aplicación Instagram para que pueda sacar una foto en ese celular nuevo que existe ahora. Se entiende eso. Entonces, el modelo que se usa para el desarrollo en realidad es al revés. Yo voy a hacer una aplicación y yo me concentro en ser bueno en lo que yo tengo que hacer. No sé, en Instagram, no sé, aplicar filtros, las redes de conexiones entre amigos y conocidos y contactos y esto. Ahora, cuando yo necesite sacar una foto lo que voy a hacer es pedirle al sistema operativo que él se encargue de sacar la foto. Entonces, ¿qué termina pasando? Que cuando un fabricante saca un modelo nuevo, no sé, Samsung saca un celular nuevo, lo que tiene que hacer es que haya una versión de Android, que funcione en ese celular y hacer algunos ajustes para que se pasa a cargar una foto en ese celular. Pero es el fabricante de alguna forma del hardware que termina siendo algo en el sistema operativo para que pueda hacer eso que yo necesito. Estoy poniendo el ejemplo de sacar una foto pero es cualquier cosa. Mandar un mensaje, hacer una conexión a internet, cualquier otra cosa. Yo hago la aplicación, no sé, los videos juegos que juegan en red en celulares. Se están pasando mensajes, se están haciendo un montón de cosas. Cuando estoy jugando, entran, tengo un hijo que tiene 12 años juega al Brawler Stars. Capas que alguno de ustedes juega, juega con otros amigos y están jugando en el mismo mundo. Se están mandando mensajes, se están combatiendo contra los mismos, no sé qué. Si el que fabricóbra al estar tendría que hacer todo encargarse de toda la comunicación, otra vez tendría que hacerlo para todos los modelos de celulares, para todos los fabricantes, para todo ese tipo de cosas. Con esta idea de yo tengo un sistema operativo, alguien que se ocupa hacer estas tareas, el que tiene que hacer la aplicación se concentra en hacer lo que él tiene que hacer. Y asume que el sistema operativo me da ese servicio. Por eso a veces pasa que sale una aplicación nueva o una versión nueva y deja de andar para celulares viejos porque necesita alguna funcionalidad o necesita algo del sistema operativo que en algún celular viejo esa funcionalidad no estaba disponible o cosas de ese estilo. Se entiende para eso que precisamos a los sistemas operativos. Puse el ejemplo de celulares pero esto en realidad también aplica una PC. Nosotros prendemos la PC, tiene Windows y no nos andamos preocupando ninguna de las aplicaciones. Yo que se entra un chat, mando un mail o algo y Windows es el que se ocupa de que ese mensaje no se se convierta en conjunto de símbolos y se mande por una conexión de red a la otra persona que yo preciso que le llegue. No el que hace la aplicación. Bueno, y otras cosas que ya mencioné un poco la clase pasada, pero es esto, por ejemplo, de la memoria, gestionar la memoria, te queda espacio de memoria, puedo abrir esta aplicación, lo que hablamos de la memoria virtual, la clase pasada, lo gestione el sistema operativo. Es el sistema operativo el que dice bueno, como te estás quedando sin memoria, yo te uso esta memoria virtual para que tengas más memoria y no tengas que cerrar aplicaciones. Y eso viene edado por el sistema operativo. El que hace una aplicación no tiene que hacer nada para hacer eso. Solo llamar algunas operaciones del sistema operativo, probé. Entonces, bueno, por eso dice acá no son imprescindibles, o sea, uno podría agarrar y hacer un programa de cero que la computadora aprenda y ejecute su programa y haga lo que él quiera que haga, pero en general es poco práctico, nadie hace eso hoy en día y todo se sustenta en el uso de sistemas operativos. Se entendió más o menos esta idea. Bueno, en general entonces para comenzar a ejecutar los sistemas operativos, seguramente como usuario ustedes ya lo vayan visto esto o por lo menos intuyan algunas cosas de las que pasan acá, o sea, primero en algún dispositivo de memoria estable, tiene que estar alojado del sistema operativo, o sea, yo tengo que instalarlo en una computadora, a veces cuando uno compra una computadora ya le viene instalado. Pero alguien en el disco duro puso el window para que el window pueda cargar, así yo compro una computadora completamente vacía y la aprendo, no hace nada, digamos, ¿todas? Cheque hace los chequeos de las memorias y todo eso y después se queda ahí porque no tiene nada para ejecutar. Lo primero que tengo que hacer es instalarlo en un sistema operativo, eso va a quedar, como decían el disco duro en alguna forma de memoria estable. Entonces cuando yo ahí prenda la computadora los que va a pasar es que se va a cargar desde el disco duro y se tiene que copiar en la memoria RAM, todo o una parte, la mayoría de los sistemas operativos hoy cargan una parte a la memoria RAM y se le ordena que ejecute la primera instrucción. Los sistemas operativos viejos, el otro día hablamos de Windows XP, Windows XP, me puedo estar acordando mal y confundiéndome con alguna versión anterior de Windows, a veces había, pero creo que Windows XP era uno de ellos, uno aprendía la máquina, aparecía luego de Windows y demoraba un minuto en darme el control en poder hacer algo. ¿Por qué? Porque cargaba un montón de cosas en la memoria y eso demoraba mucho. Hoy en día los sistemas operativos cambiaron un poco esa forma de acceder, porque los usuarios somos un poco más ansiosos, no estamos dispuestos a aprender una computadora, esperar tres minutos a poder hacer algo. Entonces cargan una partecita y enseguida, te aparece por lo menos para logriarte, para poner tu usuario, para poner una clave, lo mismo pasa con los celulares, enseguida que lo aprendes, por más que está cargando un montón de cosas todavía y eso, voy a poder usarlo. Bueno, si lo formalizamos un poco que la otra vez hablamos de las memorias, pues esto también, cuando aprende una computadora seguramente les aparezca de estos carteles y van a la sala de máquinas, y ustedes prenden la computadora les va a aparecer, o sea cuando yo prendo el equipo, lo primero que ejecutas el programa de la BIOS, que va a estar almacenado en una e-pron, una de esas memorias que son de solo lectura, digamos, que yo no puedo escribir en este tipo de memorias. Lo primero que va a hacer el labío es verificar que el hardware básico, que yo lo tengo que haber configurado previamente, está instalado y operativo. ¿Qué quiere decir eso? Cuando yo configure la computadora, le voy a decir, tenés un disco duro de tal marca que tiene tal espacio, estás conectado un teclado, a un procesador de tales características, a tales cosas que yo las tengo que configurar antes. Lo que hace en ese paso es chequear que esas cosas estén, puede haber pasado que no sé, se rompa el procesador y este quemado, no sé, o el disco duro se haya desconectado, alguien de los que desarman la computadora haya desconectado el disco duro y no lo haya vuelto a conectar, o sea, haya desconectado el teclado, entonces lo que va a salir es un cartel que te va a avisar y te va a decir, no encuentro tal cosa. Después de que termina ese proceso de chequeo que en general, es salvo que es eso, que estemos armando y desarmando computadoras, nunca nos debería pasar que ahí pase algo. Lo que va a hacer es leer los parámetros de instalación de la CMOS, que es otra memoria y a partir de eso sabe dónde pueden encontrar en el disco duro el sistema operativo, fíjense que para poder ejecutar el sistema operativo, si ven acá hay algunas cosas que pueden parecer obvia o como demasiado detalladas, bueno, si yo no sé dónde está escrito el sistema operativo, no lo puede leer, entonces tienes que estar escrito en algún lado, cuando yo prendo, dónde voy a leer la primera instrucción. Entonces, labios lee el sistema operativo de acuerdo a la dirección que le da la CMOS y carga este es el diseño que sí usado hoy en día, un núcleo de ese sistema operativo en la memoria ramo, o sea una parte mínima y imprescindible para poder empezar a ejecutar. Cuando termina de cargar eso, o sea hasta que todo eso no está cargado en la RAM, no puede empezar a hacer nada, cuando todo eso ya se aloja en la RAM, lo que hace labios es le dice a la primera instrucción del sistema operativo en pesaje de ejecutar voz y labios de jadas ser cosas. Acá está gráficamente lo mismo para terminar de entenderlo, si a yo prendo labios hace los chequeos del hardware, o sea, tiene los parámetros y los chequea, lee los parámetros del sistema operativo, empieza a leer el sistema operativo, lo cargan la RAM y le dice en pesaje de ejecutar voz. Esto pasa cada vez que apagamos y prendemos la computadora. No así cuando suspendemos la ejecución de la computadora, ahí es el sistema, esa por ejemplo es una funcionalidad del sistema operativo, queda en algún estado ahí, el sistema operativo tiene como la capacidad de bajar una imagen del en funcionamiento y cuando vuelvo a aprender, vuelve a levantar esa imagen. En ese caso no pasa nada de esto, no actúa labios, no actúa el CMOS, ahí es el sistema operativo que está haciendo eso. Cuando empiezas a ejecutar el sistema operativo, una de las cosas que va a ser es terminar de cargarse en la memoria RAM, o sea, después de que él ya está en control de la máquina, va a tener que seguir cargando un montón de cosas más, dentro de las cosas que va a cargar, van a hacer los programas de control de los diferentes dispositivos y otros programas residentes. Ahora voy a hablar un poco más de los programas de control, pero no sé, uno tiene instalado una impresora, uno tiene instalado, no sé, una conexión de red o algo a través de un puerto USB y precisa poder dialogar con esos dispositivos. Bueno, eso lo va a hacer a través de controladores y cuando uno configura el sistema operativo y le sale cosas, uno le dice, bueno, necesito este controlador, este controlador, este controlador, y ya los tiene que cargar para que yo los pueda usar. Bueno, los controladores es eso, tienen que interactuar con ese tipo de cosas, por ejemplo, el controlador del disco duro, el controlador de la impresora, pero también hay programas residentes, por ejemplo, si uno instala un antivirus, el antivirus va a empezar a funcionar ahí, en seguida, que empezó el sistema operativo. Eso es lo que lo vuelve seguro de alguna forma. Entonces, el sistema operativo tiene que esto, levanta los controladores y esos programas que se le llaman residentes, o sea, que están ejecutando desde el principio que uno prende la computadora, los tiene que cargar ahí en ese momento. No es exactamente un programa residente, pero funciona como si lo fuera. Por ejemplo, la búsqueda en Windows, no uno quiere buscar dentro de todo el disco duro de las carpetas, si ustedes se escriben comandos ahí en la parte baja, en la barra del lado izquierdo, no puede buscar el nombre un archivo y se los van a encontrar en cualquier lugar que esté. Eso es, en realidad, como un proceso del sistema operativo que está ejecutando, que es el Windows Search, que uno puede apagarlo. A veces pasa que el Windows Search para buscar hace una indexación que ocupa espacio y a veces si uno tiene el disco duro muy lleno y no le da lugar, si uno apaga el Windows Search, la computadora anda más rápido que si lo tiene prendido. No sería exactamente un programa residente eso, pero para que se hagan una idea. Y ese tipo de cosas son como aplicaciones que va cargando a medida que va prendiendo el sistema operativo. Se entendió esa idea de que son los programas residentes más o menos. El otro ejemplo que pueden empezar es el antivirus. Y bueno, hoy en día pasa con un montón de cosas. Cuando ustedes le dan al lado derecho y ven y apretan y le salen un montón de iconitos ahí, esos son cosas que la computadora ya cargó y tiene prontas para que ustedes puedan usar. Todos esos son programas residentes. Bueno, ya partí ese momento cuando termina de hacer la carga de los controladores y los programas residentes, queda la espera de órdenes del usuario y atiende interrupciones. No, acuerdense que lo mencioné en la clase pasada, funciona por interrupciones. Cuando yo escribo detecta que yo hice algo y a partir de eso empiezas hacer algo a la computadora. En muchos casos hoy en día el usuario puede hacer cosas antes de que termine este proceso de carga, pero a veces pasa que se empieza a abrir cosas claramente la computadora está trabajando y que funciona como un poco lenta o erratica al principio y es porque no terminó de hacer ese proceso. Entonces bueno, este modelo que les comentaba hoy de las aplicaciones por un lado, que cada uno que tiene que hacer una aplicación básicamente se concentra en lo que le interesa él porque va a dialogar con el sistema operativo y les hablaba de que está el hardware abajo, que se ocupa o sea el hardware son los fiertos, como se da ese diálogo entre el sistema operativo y el hardware a través de los controladores. O sea que haya el que tengo una computadora en su casa y haya instalado, por ejemplo, una impresora, para ver que para que empieza a funcionar la impresora tiene la primera vez que la conecta hoy en día muchos detectan al enchufar la impresora automáticamente la computadora detecta que ya se cargo algo y te pone que va a desjargar unos archivos, bueno eso es la controladora para que esa impresora funcione. Ahora como en realidad uno puede conectar cualquier impresora a una computadora cada vez que yo le conecto un dispositivo nuevo, lo que va a pasar es que va a hacer ese mismo proceso y va a instalar los drivers de todo lo que yo le conecta. A veces pasa que uno conecta, no sé, algo por el puerto USB, un pendra, no sé, uno está haciendo un trabajo con un compañero y le presta el pendra y para copiar unos archivos, lo enchufa y te pone voy a cargar algo para que pueda asusar el pendra, porque si no lo entiende los datos que están grabados en el pendra, no puede comunicarse con el pendra, se entiende eso. Entonces, bueno cuando uno instala el sistema operativo hay un montón de drivers que ya vienen por defecto, o sea que los va a detectar, la tarjeta de video y otras cosas, pero bueno no me instala todos los drivers posibles, sino que la lógica es esta, cuando yo enchufo algo detecto eso que estoy conectando y hago la instalación del driver. Bueno algunos ejemplos de sistemas operativos, los más famosos y los que seguramente ustedes conozcan sean windows o el sistema operativo de las max, Linux también, en realidad Linux viene relacionado con los sistemas Unix más antiguos, la facultad tuvo equipos que funcionaban con sistemas unix solaris y con el Unix Berkeley, pero está hace años que ya la facultad se pasó definitivamente a Linux, Windows que es bastante común y bastante, no sé para los usuarios que lo conocen relativamente sencillo usar, el sistema operativo de las max que tiene algunas ventajas, y la gente que trabaja con temas de diseño grafico y ese tipo de cosas en general prefiere los centornos max, en principio no hay una preferencia por ninguno de estos sistemas depende de lo que uno precisa hacer y con lo que uno esté familiarizado como usuario, yo que es el sistema Linux se pusieron de moda por llamar la sida alguna forma hace unos 20 años capaxto por todo el tema de código libre, en los sistemas operativos Windows, Microsoft, programos de sistema operativo y las personas no saben cómo funciona, el código de ese sistema operativo no está disponible para nadie, los sistemas operativos Linux no todos, pero hay un montón que siguen la filosofía de que el código está disponible, uno podría agarrar y sentarse y leer todo el programa y entender cómo funciona, en general hay gente especializada en algunas partes de ese sistema operativo, no es que todo el mundo conoce todo, estamos hablando de programas que seguramente ocupan millones de líneas de código, por más que uno tenga el código no es real que uno puede sentarse y entenderlo todo, pero eso en general también está relacionado a veces con que haya menos virus, el Linux que en Windows digamos, porque al ser de código abierto y haber mucha gente trabajando sobre ese código cuando hay una vulnerabilidad, una error de programación como pasa en todos los sistemas que puede haber, el Linux se detecta y se avisa y se corrije, en Windows como en general no se conoce el código, eso no pasa y en general se detecta nuevos virus cuando ya un ataque de ese virus, en general los virus explotan alguna error en el código que muchas veces pasan porque bueno, no sé, gente con experiencia diseña ataques especiales para esos sistemas operativos, después todos los sistemas en general son equivalentes, depende lo que uno precisa hacer, uno puede programar sobre cualquiera de ellos, en general acá en el curso, por ejemplo cuando vayamos a la PC vamos a ir a la Windows pues suponemos que es con la plataforma que están más familiarizados ustedes, pero se podría hacer lo mismo que vamos a hacer y todo lo que vamos a hacer en este curso en plataformas Linux sin ningún problema. Bueno, como les decía eso es un sistema operativo básicamente, eso me permite como encapsular o esconder el funcionamiento del hardware de un dispositivo, hay sistemas operativos para celulares, fue el ejemplo que puse hoy, los más populares y conocidos son Android de Google, iOS de Apple, hay algún sistema operativo que han tenido que desarrollar para algunas marcas de celulares chinos, no sé, creo que es Huawei que tiene un sistema operativo propio, que en realidad creo que usa cosas públicas de Android y le tuvieron que agregar, tuvieron que cambiar las cosas, creo que lo comenté, la clase pasada cuando hablamos de arquitectura pero entre China y Estados Unidos vienen con este problema, bueno, por disputas, política, por ver quién es la potencia más grande y por problemas comerciales y todo eso, entonces ya desde la época de Obama más o menos hay ciertas tecnologías desarrolladas en Estados Unidos que están prohibidas, que se las vendan a China, eso yo les hablé de las tarjetas de video por ejemplo, algunas arquitecturas de tarjetas de video, las que están muy pensadas como para inteligencia artificial y eso no se las pueden vender al gobierno chino, por ejemplo, y acá hubo algunos líos con Huawei, creo que es con Huawei, me puedo estar equivocando el fabricante, por temas de privacidad que decían que guardaba información y se espiaba a la gente o algo así, y entonces Android no podía seguir funcionando, básicamente los prohibieron que siguieran haciendo versiones para ese fabricante de Harvard. No voy a entrar ahí en detalles todo el tema de los datos personales y la confiabilidad, es algo que debería preocuparles a futuro, digamos, es algo que está bastante, o sea más allá de, también con el tema del 5G, esta discusión también estuvo, o sea Huawei también fabrica tecnología 5G y en algunos países se proguió usar esa tecnología, y bueno puede ser ahí un poco, o sea, es un problema de la sociedad actual y vamos y va a ser refuturo, de alguna forma no sé, están estos fabricantes chinos de los que hay una cierta desconfianza de si se arroban los datos o los usan para otros fines y en crear muchos de nosotros usamos Google, usamos Gmail y vemos que continuamente usan nuestros datos para hacer otras cosas, pero está, en el fondo hay como discusiones políticas y ese tipo de cosas, pero en general hay muchos fabricantes que están empezando a hacer cosas para que tus datos no puedan ser usados para otras cosas, pero estamos bastante el lejos de eso. Después sorprendentemente con todo esto que estamos hablando, o sea si bien Windows es una de las plataformas, ¿no? En sistemas operativos de PC Windows tienen más penetración que Linux, hay más gente que usa Windows que la que usa Linux, sin embargo en sistemas operativos de celulares nunca logró posicionarse como una tecnología, aquí es un sistema operativo, algo que la gente usará masivamente, está tuvo varios intentos, Windows Phone, Windows 10 Mobile en algún momento, pero llegó tarde a los dispositivos que son marca Apple, está tienen su propio sistema operativo y juegan por afuera, ¿no? O sea no va a ver un Windows que ande en AlgoApple porque Apple no va a permitir que otros sistemas operativos ande en sus plataformas, pero para los dispositivos más generales, o sea de otros fabricantes, Android o Google llegó primero con Android y por más que ha hecho un montón de esfuerzos, Microsoft durante muchos años por hacer un sistema operativo que le compita, no lo ha logrado. Fíjense que es como bastante raro, porque uno usa la computadora en Windows, lo más natural sería que su pasaje al celular sea con el mismo sistema operativo y que sea fácil interactuar entre las dos cosas, y están fuerte el uso de la gente, por parte de la gente de Android, que nunca logró hacerle mella, digamos, y básicamente lo último que estuve viendo sobre esto, porque Windows 10 Mobile ya estaba discontinuado, es que hoy en día lo que hay es como una especie de Launcher que te permite correr como algunas funcionales de Windows, arriba de Android, pero ya no se están planteando hacer un sistema operativo, digamos, de cero que ande en un cosa porque está, es como que de alguna forma reconocieron que ya perdieron ahí y que no tiene sentido seguir intentándolo. ¿Se entendió más o menos esto? Bien, como en todas estas clases que son así más generales y eso, ahora notado que a la gente de computación le encanta clasificar las cosas para tratar de envenerlas, hacer taxonomías y ver características distintas entre las cosas, en general los sistemas operativos, como dos características que no suelen interesar o que históricamente solían interesar, una tiene que ver con la cantidad de usuarios que pueden trabajar concurrentemente, en un dispositivo que tiene ese sistema operativo, o sea, cantidad de usuarios que pueden trabajar a la vez, tengo una PC, cuantos usuarios pueden estar a la vez trabajando sobre la misma máquina, entonces, bueno, tengo los que son mono usuario, en los que solamente puedes trabajar en un usuario a la vez, y tengo los multi usuarios que permiten en forma simultánea trabajar más de un usuario a la vez. De los que están acá, ¿quién cuantos usan Linux? Ninguno. Bueno, los sistemas operativos Linux en general son multi usuarios, ¿vale? Usted pueden ver si van a la sala de Linux, puede haber estudiantes haciendo una tarea de programación y accediendo remoto desde la casa y trabajando la misma máquina que había un estudiante en ese momento, tipeando en esa máquina, incluso ejecutando sus programas ahí en esa máquina. Esto es una característica como super útil, se usa bastante, de los que están acá cuantos usan Windows, Windows es multi usuario o mono usuario. ¿Mono usuario? Pero también se puede controlar los ríos y eso es manejarlo del teléfono de los ríos. Más o menos, es multi usuario. Existen aplicación que la facultad no está instalada y que se puede usar que se llama Remote Desktop, por lo menos se llamaba CIANTE y no sé cómo se llama hoy en día, que permite que una persona está remoto a la computadora pueda acceder y trabajar sobre esa computadora con la misma filosofía de esta que tiene Linux. En general, no es una aplicación que instalemos por defecto, en las computadas que tenemos en nuestras casas o eso, por eso no sabemos que existe, digamos, pero eso los sistemas operativos modernos, todos tienen hacer multi usuario porque es eso, como tenés más de un core, yo que se puede ser un equipo que tenga 8 cores y eso pueden trabajar 2 personas concurrentemente sobre el mismo. Cada uno ve solo sus datos, no puede ver los datos del otro, pero eso es una funcionalidad super útil y Windows la tiene también. Se les ocurre algún ejemplo de sistemas operativos monosuarios y que creo yo, ¿no?, ¿qué van a seguir siendo monosuario que no tiene sentido que sean multi usuarios? ¿No se dan y puede ser un teléfono? Los celulares. ¿Por qué querríamos que alguien remoto a la vez esté usando el teléfono y competiéndonos por los recursos? No parece tener sentido, no parece ser una funcionalidad útil, al momento actual no está soportado y yo creo que no va a estar porque ese son... No es algo que parezca que sirva para algo y es más, como solemos tener información sensible a nuestros celulares, nos espone a posibles ataques o cosas, entonces yo no creo que eso vaya a pasar. ¿Se entendió esta idea de multi usuario o monosuario más o menos? Bien, entonces a medida que ha pasado el tiempo casi todos han convergido a esto y en la cantidad de tareas concurrentes que puedan realizar están los monotarea que básicamente están haciendo una cosa a la vez y los multitarea que pueden hacer más de una tarea a la vez con el advenimiento del paralelismo a las computadoras, lo que contaba la clase pasada, todos los sistemas operativos han ido hacia multitarea. Igual es interesante que incluso cuando teníamos un procesador solo había varios sistemas operativos que no eran monotarea que lo graban hacer algunas cosas como de compartir el tiempo entre procesos y ejecutar un poquito cada cosa para que las cosas fueran ejecutando como si fueran multitarea. Pero bueno, en esto hoy en día todos los sistemas son multitarea, por lo menos los que usamos, como incluso los de los sistemas operativos tienen, bueno, ustedes lo habrán visto, tenéis varias aplicaciones abiertas, los celulares ya son cual cor, o sea puede ser que alguna implementación, bueno, en realidad la implementación del sistema operativo es multitarea, pero puede ser que uno le use en algún contexto restringido, alguna cosa sobre todo a la gente que trabaja en sistemas en bebidos o que hace internet de las cosas, esos que no se ponen algún chip en algún lado a sacar fotos y procesar esas imágenes, no sé, detección de plaga en fruta en el campo, no pone una PC, poner una placa más chiquita con alguna cosa más sencilla, pero igual si están usando Linux el sistema operativo es multitarea, ¿se entendió más o menos esto? Bien, esta es una aclaración nada más porque a veces genera dudas, que tiene que ver con que con el interfaz con el que interactuamos con el sistema operativo, ¿sabes? Cada sistema operativo por lo menos va a tener un interfaz con el usuario y eventualmente puede tener más de uno, ¿sabes? No sé, estamos muy acostumbrados a Windows que tiene todo el sistema basado en ventanas, si uno va a donde puede tipear comandos en Windows y uno pone cmd le va a salir una ventanita negra que básicamente es un interfaz para interactuar con el sistema operativo, en lo que uno va escribiendo comandos, o sea es una ventana negra, texto blanco y uno va poniendo, no sé, puede navegar entre las carpetas, por ejemplo, poniendo con dir, le dice que archivos hay en un directorio, puede hacer cd el nombre de una carpeta para moverse una carpeta y puede copiar los archivos escribiendo comandos, y no usando el interfaz visual, o sea la funcionalidad del sistema operativo es la que me permite mover los archivos, copiar los renombrarlos, el interfaz es lo que me permite verlo lindo con ventanas y que eso sea fácil, pero no tiene que ser la única forma en que yo haga eso, justo no hay ninguno que usa Linux, pero Linux es más, uno puede elegir el sistema de ventanas que usa y hay más de uno disponible, en Windows en realidad es como uno solo, entonces bueno hay como una especie de protocolo entre el interfaz y el sistema operativo, ahora vamos a ver porque básicamente el interfaz es una aplicación más, a veces para el usuario es difícil verlo, pero el interfaz con el que yo estoy interactuando, o sea cuando yo agarro y abro los archivos y empiezo a mover carpetas y hacer ese tipo de cosas, yo estoy interactuando con el interfaz que me da el sistema operativo, pero no es parte del sistema operativo, entonces como les decía hay interfazes de diferentes características, uno puede ser solamente de texto, esto es lo que yo les decía que puede usar en Windows usando el comando CMD, a veces Microsoft antes de tener los sistemas Windows tenía los sistemas de OS que estaban todos basados en eso, pantalla negra escribía comandos, no había ventanas, estamos hablando de hasta el 90 y no sé, un poquito, el 92, la verdad que no me acuerdo exactamente cuando los sistemas Linux tienen la Shell de Linux y algunas veces estuvieron en las salas de Linux y en los estudiantes de computación van a ver que más allá de estar usando la navegación y eso, en los que están eventanas escribiendo comandos y cosas de ese estilo, permite automatizar fácilmente tareas, si no quiere que algo se haga muchas veces, es más fácil escribir un archivo con esa cantidad de instrucciones y pedir que esos ejecute muchas veces que uno iras en la mano moviendo carpetas y copiando archivos, bueno esos son los de texto digamos y apetemos los gráficos que bueno el de Windows como les decía es único, el de Apple también y bueno, Linux uno tiene un montón de opciones para elegir, en general, siempre cada tipo de Linux viene con un interfaz por defecto, seguimos en esto como de ir subiendo en esta especie de capas, hablamos del hardware primero, después hablamos del sistema operativo y para terminar de entender esto del software y qué cosas forman parte del sistema operativo y cuál es no, vamos a usar esta terminología que cada vez se usa un poco menos pero que es clásica que habla de software de base o programas de base, ¿qué son esos software de base o programas de base? Bueno, el interfaz gráfica, el sistema operativo como mencionaba, los editores de texto, el navegador de internet, el administrador de correo electrónico, una planilla electrónica, un manejador de base de datos, ¿por qué hacemos esta salvedad para que ustedes acuerden, acuerden, se lo que era el sistema operativo, el sistema operativo es eso que interactúa con el hardware y me permite hacer las cosas, en la navegador de internet no forma parte del sistema operativo, lo que pasa que hoy en día cualquier sistema operativo que vos instales viene con un navegador de internet, pero en realidad es una aplicación distinta que podría estar instalada o podría no estar instalada, lo mismo es el bloc de notas, lo mismo es tener un programa de manejo de correo electrónico, que hoy en día uno instale a Windows y viene ya con un montón de otros software que es útil y sin el que uno no podría capaz que usar la máquina o la mitad de las cosas que no quieras hacernos las podría ser, pero es importante que en día dan que eso no forma parte del sistema operativo, ¿sabes? Se entendió esa diferencia, otra cosa es que cuando uno lo instal va en la tele, así que el día uno instale a Linux también viene con todo eso, porque todas saben que el usuario necesita esas aplicaciones, pero no forma en parte del sistema operativo, Después me va a pasar en que en varios contextos de trabajo yo voy a tener lo que se llama en aplicaciones usuarios, que son en realidad aplicaciones específicas que van a tener sentido para un usuario en particular. Yo que si estamos hablando, no sé, en la sección de sueldo, por ejemplo acá de la facultad o de un trabajo, y seguro que va a tener un software de liquidación de sueldos, porque lo va a precisar para poder gestionar todo lo que tiene que ver con el pago de los sueldos. Si es una empresa que factura va a necesitar un sistema de facturación, algo para el manejo del sistema contable o la gestión de stock, esto podría ser incluso en una fábrica o algo de ese estilo que tenga que gestionarlo. Bueno, estos software van a ser específicos y cada necesidad de un usuario va a ser que o compre un sistema de ese tipo o desarrollo un sistema de ese tipo, pero fíjense que este tipo de aplicaciones están como un nivel como un escalón más arriba, o sea, son súper específicas. Esto yo no preciso que cualquier computadora tenga esto para usarlas. Entonces por eso se hace esta distinción entre software de base y aplicaciones de usuarios o software de usuarios. En el software de base, como les decía, hay un montón que son aplicaciones y uno podría verlas al mismo nivel que estas otras, digamos. Pues yo le digo que esta categorización entre software de base y aplicación de usuario cada vez se tiende a usar un poco menos. Bien, entonces venimos hablando de las aplicaciones y eso y una aplicación que va a ser muy importante para nosotros van a ser los editores de texto. ¿Por qué? Porque vamos a programar, programar básicamente es escribir un conjunto de instrucciones o comandos para que la computadora haga algo y para eso vamos a precisar editores de texto para poder hacerlo. Entonces el primer tipo de editores de texto son los editores de texto plano. Cuando uno se refiere a texto plano, está hablando de texto ASKII, o sea, texto que no tiene ningún tipo de formato, se acuerdan que la clase pasada vimos, la tabla ASKII tenía las letras en minúscula, las letras en minúscula, los números y tenía un montón de carácteres especiales que era, no sé, dar una entera y cosas de ese estilo, pero yo no podía, no tenía una letra subrayada, no tenía letras en negritas, no tenía tamaño de las letras. Entonces en este tipo de editores, en general lo que yo voy a poder hacer es escribir algún tipo de texto en lo que lo importante es lo que está escrito, digamos, o sea, voy a tener un solo tipo de tipografía, o sea, un solo tipo de letra, no voy a tener gráficos, no voy a tener colores y en general, este tipo de editores son los que me van a servir cuando yo quiera suministrar información en un programa o sistema, o sea, para programar yo voy a usar editores de texto plano, ¿no? ustedes van a tener el lunes que viene la presentación con Ernesto y después las clases en las salamas, guinas van a usar un editor que forma parte de Octav donde pueden escribir las instrucciones y van a ver una cosa que les vaya a man la atención por esto que yo les digo, el editor de Octav reconoce algunas palabras especiales que ustedes van a usar, no sé, las palabras function, las palabras y y el tipo de cosas y se les va a pintar de colores, ahí, a uno le podría ser ruido y va a decir bueno, pero vos me está diciendo que no hay colores, que no hay esto y cuando yo uso un editor real, me pinta las palabras de colores, bueno el que está pintando eso es el editor, cuando uno guarda el archivo, si ustedes lo abran en otro editor van a ver que las palabras no tienen colores, lo pasa de claro, cuando yo programo en Octav, Octav sabe que la palabra IF tiene un sentido especial en la programación, entonces me la resalta para que yo la veía más fácil, la palabra funcione, la palabra wild, ahora cuando trabaja en la semana que vi las otras semanas, las salamas guinas lo van a ver, es importante ahí que no les género con funciones, o sea no es que se está escribiendo esa palabra en ese color, sino que la estoy viendo en ese color, solamente ese el editor el que me la muestra de esa forma, ¿por qué? porque imagínense cuando uno escribe programas de 50 líneas de código, si todo se ve sin ningún tipo de jerarquización es difícil leer el código, ¿qué editor es de texto? Ay bueno, el más conocido es el blog de Notas, seguramente que alguna vez lo haya usado y bueno, estos son de Linux y esto ya están más orientados a veces a programación, no un pad más más y sublime es eso, si yo escribo, el sublime, por ejemplo me deja elegir, asociado a un texto en que el lenguaje está escrito ese texto y en función de eso me pinta las palabras especiales de colores, ¿vale? este se usa bastante en desarrollo, ¿vale? ustedes van a usar un editor que ya viene en Octav, Octav, van a lo van a la clase que viene es un entorno en el que yo puedo ejecutar cosas y a la vez puedo escribir código y eso me permite escribir cosas y probar que hacen de forma bastante interactiva, eso no suele pasar en la mayoría de lenguajes de programación, por otro lado voy a tener los procesadores de texto que van a tener texto con formato enriquecido, en ese caso yo voy a poder agregar elementos que me dan a permitir organizar y jerarquizar la información, esto es lo que están más familiarizados, por ejemplo Word que es uno de este tipo donde yo puedo usar diferentes tipos de carácter, subrayado, negritas, tamaño, colores, pone imágenes y parlinx y esto en realidad está más orientado a que se ha leído por una persona, o sea si yo haga un Word y escribo un programa en Octav y se lo doy, escribo un programa en el lenguaje de Octav y se lo dio Octav, Octav no va a saber procesar ese archivo porque tiene un montón de otra información que Octav no sabe qué hacer con ella, se entendió eso, entonces cuando uno vaya a hacer un programa o usa el editor de Octav o usa el blog de notas o algo similar pero no vayan a usar nunca un procesador de texto con formato porque lo que les va a pasar es que cuando le pidan ejecutamente este archivo les va a dar el error, bueno vamos a empezar a hablar del lenguaje de programación, o sea hablamos de hardware, hablamos de sistemas operativos, de los tipos de aplicaciones que hay, estas de base, las otras más orientadas en usuario y ahora vamos a hablar del lenguaje de programación que nos van a permitir a nosotros hacer programas, hacer aplicaciones, no vamos a llegar a hacer aplicaciones como las que suelen usar, pero vamos a hacer programas que hacen que la computadora compute o haga un cálculo o resuelva un problema concreto, entonces bueno que es un, que es un lenguaje, es un conjunto de símbolos y reglas acerca de cómo se organizan esos símbolos, esta es la definición del lenguaje general, en un lenguaje de programación va a ser los mismos pero aplicados a la programación, o sea yo voy a tener un conjunto de reglas y de símbolos que voy a poder usar para poder escribir ese programa, si yo no cumplo con esas reglas lo que va a pasar es que el programa no va a funcionar, me va a dar una error, me va a decir no entiendo lo que me quieres decir, es bastante parecido con el címil, con el idioma, con el lenguaje castellano o ese tipo de cosas, si yo construyo más las oraciones lo que pasa es que ustedes no me entienden lo que yo digo, bueno si yo cuando les escribo en un lenguaje de programación, un programa a la computadora y escribo las cosas mal, digamos no respeto las estructuras, lo que va a pasar es que la computadora no va a entender lo que yo quise decir, en el caso de la computadora es peor porque básicamente aplica un algoritmo y tratadas de hacer eso, entre dos personas capaz que yo me expreso mal pero si la otra persona pone buena voluntad termina entendiendo lo que yo quise decir, la computadora aplica reglas y si no te ceniza las reglas, no entendiendo, estás haciendo algo mal. Hablamos la clase pasada del tema de los 0 y 1 y todo el tema del binario y eso cada computadora tiene un lenguaje de máquina, digamos que es en binario, digamos que son tiras de unos y cero de instrucciones que entiendes a computadora, lo que nos va a permitir hacer un lenguaje de programación es que nosotros podamos escribir un algoritmo, o sea un conjunto de instrucciones en un lenguaje de más alto nivel y en algún momento eso se va a convertir a esas instrucciones de unos y cero que va a usar la computadora, se entiende eso más o menos, o sea, antigua mente, no sé, hay gente que hoy en día trabaja en cosas en las que programan muy bajo nivel y termina programando prácticamente en lenguaje de máquina, pero son aplicaciones muy concretas y muy específicas. Cuando empezaron las primeras épocas de la programación y ese tipo de cosas en computadora de la década de 60, 70, lo el lenguaje de programación empieza a surgir por ahí, pero lo primero se programaba en eso, en las instrucciones de la máquina, tiras de unos y cero, instrucciones de muy bajo nivel, a veces las máquinas tienen otra cosa que se llama el lenguaje en zamplador, que por lo menos esas tiras de unos y cero me los transforman en palabras que tienen algún sentido, pero bueno, lo que ha pasado con el paso de los años es que uno tiende cada vez a programar con más nivel de abstracción, uno no quiere hacer cosas tan abajo nivel en general, entonces es fundamental el uso del lenguaje de programación que permiten que yo pueda definir como ideas a más alto nivel, más conceptuales, no? No sé, hablaba la otra vez del modelado del río a la plata, el tema del sedimento y todo eso, en realidad yo voy a tener un problema ahí de cuaciones en derivadas parciales, de elemento finitos o algo en lo que yo quiero que cada posición del río en función del sedimento que hay en las posiciones cercanas y como viene la marea calcule en el paso siguiente, cuál va a ser el sedimento en ese lugar? Bueno, eso es un problema matemático, son unas ecuaciones que yo tengo que resolver, o sea, ¿qué tiene que ver con los unos y ser? O sea, yo quiero un lenguaje en el que le pueda poner expresiones matemáticas y me pueda calcular las cosas, se entiende, yo necesito mucha más abstracción, el ejemplo que le ponía de los molinos de viento y los tipos de pala, lo que yo quiero poderlo decir es, bueno, tenés estos diseños, evaluó a mi el aserón simulador, no quiero escribir en instrucciones de bajo nivel de una computadora o en unos ciseros, entonces lo lenguaje de programación me simplifica en la vida, es lo que hace que yo pueda resolver problemas más difíciles, que si no me perdería el tiempo aprendiendo a programar en Asemlar, Buenceros y Unos. Hay muchos tipos de lenguaje de programación, depende un poco para qué lo quiera uno, el lenguaje que va a usar, los lenguajes científicos que se suelen usar, voy a hablar la primera madlava y Octav, madlava es un lenguaje que es hecho por una empresa, Octav es como una versión libre, bastante inspirado en madlava, con menos librerías disponibles, no? Madlava te da un montón de librerías que te resuelven ya un montón de problemas, en Octav hay una comunidad de gente que desarrolla cosas similares, pero bueno a veces no tiene todas las cosas que tiene madlava, nosotros vamos a usar Octav primero porque es eso, ustedes lo pueden bajarlo, pueden instalar o sea gratuito, madlava, las licencias salen como 5 mil dólares, una cosa así, no tiene sentido, después está fortran que es otro lenguaje científico, este es un lenguaje bastante viejo y que se viene usando como desde la década del 70, ha tenido muchas versiones, los que usaban esto, mayoritariamente originalmente eran los físicos, hay mucha gente que la dura hoy en día en el Instituto de Mechanica, toda la gente que trabaja como intermo aplicada, la gente que trabaja con curto y eso, que usan fortran para programar, se sigue usando hasta el día de hoy, bueno después hay software que tienen que ver más con cosas comerciales, como los sistemas de bancos, bases de datos y almacenamientos, se hizo que ese sistema de liquidación de UT que suelen usar cobo, les salgo viejo, que todavía sigue existiendo, pero generalmente con códigos legados, pero se usa bastante las bases de datos programadas en ese URL, o PLSQL, después hay algunos lenguajes que persigan objetivos genéricos, que son multipropósitos, se asirven un poco para cualquier cosa, el que más se usa en computación suelen ser 6 y se más más, que se usa bastante, Python también es un lenguaje que se está usando bastante ahora, sobre todo para los temas de ciencia de datos y eso, que da varias posibilidades, digamos, bueno después hay software específico para generar simulaciones, si uno tiene que hacer choque simulaciones de estado finito, de cosas, bueno justo las simulaciones que se me ocurren, se pueden resolver analíticamente, pero por ejemplo si uno quisiera hacer un modelo en los supermercados, los supermercados usan modelos, alguien lo estudió, los modelos de cola para minimizar el tiempo de espera de la gente cuando os diga que pagar, ustedes son relativamente jóvenes, pero seguramente lo vieron hace 10 años atrás o 15 años atrás, los supermercados, la gran mayoría tenía 10 cajas y había 10 colas distintas, seguro que lo llegaron a ver, hoy en día la mayoría de supermercados tienen una caja sola y vos vayendo a la caja que va quedando libre, eso ese modelo se puede estudiar analíticamente, no hace falta simularlo, eso hace que el tiempo espera de la gente sea más bajo que en el otro modelo, pero bueno, con simula uno puede generar eso, una simulación y estudiar los tiempos medios de espera y ese tipo de cosas, bueno pues puede haber software específico, yo que es para hacer animaciones, no sé, en algún momento flashe era algo muy usado, creo que se usan bastante menos y bueno, la carrera computación se ven otros paradigmas distintos al que vamos a ver en este curso, que tiene que ver con programación funcional o programación lógica, pero bueno eso no me va a poner a explicar qué son, pero eso se esquema siguen ideas un poco distintas a las que vamos a ver en el curso, si alguna vez escucharon hablar a seguramente alguno con el tema de la aplicación coronavirus-sui, capaz que los sintió hablar a Jodal, que es el dueño de Arteche, el motor de Arteche, Arteche es una empresa que hace un software uruguayo que se llama GeneXus, creo que ahora la vendieron la empresa y eso, que permite, es como un software que te ayuda a desarrollar otros sistemas, el grueso de las cosas, o sea el motor que funciona abajo nivel usa el paradigma de este lógico digamos, usan un ese paradigma para desarrollar su aplicación, en computación hay un curso de un semestre que enseña programación funcional y otro curso de un semestre que enseña programación lógica, pero bueno es bastante distinto a lo que vamos a ver en el curso. Bueno entonces estábamos hablando esto de cómo de un lenguaje de programación se va a pasar a un lenguaje de máquina, básicamente van a haber 12 estrategias distintas que van a tener características completamente distintas y van a determinar funcionamientos distintos, por un lado está la compilación y por otro lado está la interpretación o los lenguajes compilados digamos o los lenguajes interpretados. ¿Qué pasa con los lenguajes compilados? A ver, de ejemplos de lenguajes compilados son Fortran, C, C, C más más, esos de los que yo, de los que nombres que estaban en la presentación anterior en la PPT anterior, esos son compilados. ¿Qué es lo que va a pasar en un lenguaje compilado? Bueno el programador va a escribir su programa fuente o sea su código, va a escribir el código que puede tener funciones, puede estar partido, no quiere decir que tiene que escribir un único archivo que tiene un mon que son miles y miles de líneas, sino que podría partirse en archivos, tener algún tipo de relación entre esos archivos y con esos archivos va a llamar a un compilador, un programa que es el que se va a encargar de generar el código más aquí. ¿Qué es lo que va a pasar acá cuando yo compile el compilador lo que va a hacer es chequear que lo que yo escriba este correcto sintácticamente? ¿Qué quiere decir que este correcto sintácticamente? Que esto que les decía hoy del lenguaje, de que yo estoy usando bien las reglas del lenguaje en el que estoy programando. Todos los años creo que pongo el mismo ejemplo. Si yo les digo el perro verde, usted pueden decir ¿a qué sentido tiene un perro verde? capaz que el color no es ese y te está refiriendo algo que está mal, pero eso es semántica. La oración está bien formulada, o sea es el perro verde, si yo les digo perro verde o verde perro él, usted va a decir no, ahí estás diciendo algo que está mal. Bueno, cuando hablo de chequeos sintácticos de alguna forma lo que está pasando es eso, lo que está chequeando es que la estructura que yo estoy armando tenga sentido. Ahora eso no quiere decir que eso haga algo que esté bien. Yo puedo escribir algo que es sintácticamente es correcto y que semánticamente esté mal. Lo mismo va a pasar con los lenguajes de los programas que yo hago en los lenguajes de programación, o sea cuando yo compilo algo lo que va a chequear es que yo esté usando las instrucciones correctamente, o sea que si en el IF por ejemplo que lo vamos a ver dentro de varias clases, lo siguiente que se espera es una condición, aparezca una condición. Ahora el compilador no tiene forma de saber si la condición que yo escribí ahí es la correcta para este programa. Lo que va a chequear es que yo si respete la estructura sintáctica de lo que tengo que escribir, o sea siga las reglas del lenguaje de programación. Si escribo algo que sigue las reglas pero hace otra cosa distinta la que yo tengo que hacer el programa va a funcionar mal pero va a funcionar. Se entiende eso. Entonces el compilador lo que hace es chequear esas condiciones semánticas y genera un código máquina. Se va a ejecutar un encadenador después del compilador que es el que va a generar el ejecutable, que va a ser la tira de unos ciseros. ¿Por qué? Porque está en ese paso intermedio acá. Bueno, porque como les decía hoy hay muchas cosas que se usan para aumentar la productividad en computación y una tiene que ver con que existan bibliotecas que hacen algo. Por ejemplo, en los ejemplos que he ponido hoy, si yo creo estoy haciendo un modelado de algo y en el medio resuelve una ecuación en derivadas parciales. Si existiera una biblioteca que resuelve ecuaciones en derivadas parciales en mi código lo que yo pondría es llamar esa biblioteca y ejecutar esta función. Ahora en mi programa no están los unos ciseros de cómo resolver eso. En mi programa solo está la llamada esa función. Yo le voy a decir a la biblioteca solver de ecuaciones en derivadas parciales, resolverme llamar tal función que resuelve este tipo de ecuaciones en derivadas parciales. Entonces, primero se hace esa compilación, se obtiene algo que ya se empieza a parecer a unos ciseros o tiene unos ciseros, pero en algún lado dice acá llamar la función tal de tal otro biblioteca, acá llamar a tal cosa. Entonces en esta etapa del encadenador lo que haces se obtienen los unos ciseros de esas funciones que yo llamé y con eso se hace un programa ejecutable completo. Se hace genera toda la tira de unos ciseros que ejecuta mi programa, por eso está esta separación entre compilador y encadenador, pero lo importante acá es que entiendan en este proceso de eso, tengo el programa fuente, compilo, con eso obtengo los unos ciseros y el único chequeo que se hizo en el medio es sintáctico. Ahora como decían eso si yo uso un montón de biblioteca, si uso un montón de funciones lo que me va a pasar es que el programa ese binario va a crecer y va a ser muy grande, y eso me va a traer problemas para que eso cargue en la memoria RAM. Entonces en Windows por ejemplo en algún momento lo que se usaban son unas librerías dinámicas, que se llamaban DLL, se sientan usando hasta hoy, entonces si yo llamaba esas rutinas que estaban en esa biblioteca y todo eso, en vez de traerme los unos ciseros y incrustárselos a mi código, lo que se hace es que se dejan como unas referencias pendientes y cuando va a ejecutar llama a esa librería que ejecuta. Ese es el esquema que usa Windows, este otro esquema, perdón, los dinámicas y a Redob, yo creo que son de Linux. Bueno eso son los compilados, ahora como funcionan los interpretados, nosotros vamos a trabajar con Octav, con Octav que es interpretado, en los lenguajes interpretados lo que se hace es se agarra ese texto que yo estoy escribiendo con el programa y voy a leer una única instrucción, voy a leer una sentencia sola, esa se van a analizar otra vez el chequeo este sintáctico que les digo, o sea ver que la instrucción sea correcta en el sentido de que respete las reglas del lenguaje, si no está bien me va a dar un mensaje de error, me va a decir, no entiendo lo que escribiste, correjilo, porque no se entiende esa instrucción y te va a dar algún tipo de ayuda de cuál es el error, que es lo que no están tendiendo, a veces ese error puede ser bastante difícil de identificar, si la instrucción que yo le doy es correcta, digamos, en el sentido sintáctico, el interprete la entiende lo que va a hacer es ejecutarla y ahí va a pasar a esperar a leer la próxima sentencia, entonces fíjense que esto es bastante distinto a lo que dije hace un rato, porque en lo que hace un rato yo tenía mi archivo con 1000 líneas y lo que le hacía en las procesadas todas y generaba unos ciseros, en esto va a dar la primera línea, la va a tratar de ejecutar, puedo, voy a la segunda y nunca genero los unos ciseros, digamos, de alguna forma, eso en general nos da un montón de ventaja porque nos permite prototipar, programas, o sea yo puedo escribir una instrucción y probarla, ver qué hace, escribir otra instrucción y probarla, ver qué hace, en los lenguajes compilados lo que suele pasar es que si uno hace un programa largo de 1000 líneas de código y no lo fue probando a poquito, le va a pasar que que o a paje cuando compila, le encuentra 40 errores y a veces es un poco difícil porque los errores se encadenan y los mensajes de error son muy difíciles de seguir, si han visto a los estudiantes de computación haciendo entregas de pedos y de P3 eso le pasa todos los días, digamos, están luchando contra el compilador y tratar de entender por qué no me compila, nosotros vamos a usar este paradigma que en general es más sencillo, tiene algunas ventajas y tiene algunas de ventajas, ahora vamos a ver cuáles son, bueno, primero cerremos esto de cómo funciona cada uno, cuando yo hago un programa compilado entonces como yo estoy obteniendo los 1.6 cero termino con un programa ejecutable para eso, o sea si fueran Windows, ustedes van a terminar con un punto X en el que si uno hiciera doble clic va a ejecutar el programa ustedes, entonces la interacción siempre es el hardware con el sistema y el programa que yo generé, cuando yo trabajo, cuando yo trabajo con programas interpretados yo voy a tener el hardware, el sistema operativo y voy a necesitar tener el interprete siempre y voy a usar mi archivo para ejecutar, o sea para que ustedes puedan ejecutar Octav, van a precisar una máquina que tenga instalado Octav, si no no van a poder ejecutar el programa, si ustedes hicieran la entrega o este código, este curso perdón lo hicieramos en C, ustedes con el ejecutable los podrían copiar de una máquina otra y ejecutarlo en otra, ¿sabes? se entendió esto, cuando yo tengo interpretado siempre necesito el interprete, puede ser que este esquema les parezca un poco complejo y dice bueno, pero sí lo hizo, se usa para algo, bueno los que tengan una máquina Windows y cada tanto les cargue y les diga estoy actualizando el Java y ese tipo de cosas Java funciona así y fue un lenguaje que tuvo mucha incidencia en la explosión de internet en las computadoras, ¿por qué? porque es esto lo mismo que hablábamos con el sistema operativo, si yo tengo un interprete instalado en cada máquina o sea yo doy la versión para que se pueda instalar cualquier máquina soporta los programas que yo haga cuando yo genero un ejecutable hay que ver si andan cualquier máquina, ahora voy a explicar por qué a veces no andan en cualquier máquina, ¿sabes? ¿por qué no van a andar en cualquier máquina? por lo que dice acá, o sea yo necesito un código ejecutable para cada plataforma, se acuerdan cuando hablábamos de las máquinas de 32 bits y de 64 bits, bueno si yo lo generé 64 una de 32 no me andan, si yo genero un ejecutable para Windows el Linux no me andan, si lo genera el Linux en Windows no me andan, ¿eh? entonces cuando yo compilo genero un ejecutable que van a dar que va a funcionar en esa máquina y en máquinas similares, si lo copio a otra de características distintas ese archivo no van a andar, ¿por qué? porque esas tiras de unos ciseros acuerdan ceso en instrucciones de la máquina, cuando yo uso esas instrucciones de máquina en un contexto Windows entiende algunas instrucciones y otras no y cuando lo hago en Linux hay otras que no se entiende encruzadas ¿está? ¿Qué ventaja tiene? bueno ya que dije nombre primero una desventaja voy a seguir con otras ventaja que es que no es cómodo para modilar cuando yo no tengo el algoritmo, ¿eh? es esto si yo quiero probar una idea digo a ver esto capaz que funciona a ver yo tengo que escribir un programa completo para poder ejecutarlo, no puedo probar dos líneas de código y ver qué hace, entonces no puedo prototipar fácil, ¿vale? ahora la gran ventaja que van a tener eso es que como ya tengo la cadena de unos ciseros cuando yo ejecute un programa compilado van a rapidísimo, cuando yo trabajé con cosas interpretadas en general van a ser más lentos porque fíjense que cada vez que yo ejecuto estoy convirtiendo las instrucciones, estoy decidiendo a esta instrucción quiere decir que tengo que hacer algo al cosa, esta instrucción está bien sintácticamente, quiere tengo que hacer esta cosa, en el otro yo ya generé todo el código junto y ya está, lo bueno que tiene es que el programa es válido para cualquier plataforma con la que yo trabaje que tenga el interprete, o sea acá ninguno tiene Linux pero si no sé fueron a hacer laboratorios dos compañeros y uno tiene Windows el otro tiene Linux se pasan el archivo del programa y les van a dar en las dos máquinas, lo único es que tienen que tener un tab instalado en cada una de ellas y es mucho más fácil para hacer modelado y análisis de rápido de datos, o sea yo tengo que trabajar sobre eso quiero analizar unos datos, ver, no sé si hay una regres, si puedo hacer una regresión lineal entre un conjunto de datos le pido a ver, mostrarme cómo son estos datos, asemina gráfica, se me esto, voy viendo cosas y tomando decisiones, el otro yo tendría como que pensar todo a priori, en computación obviamente cuando hay estos paradigmas así que son tan opuestos lo que se busca de tratar de hacer algo intermedio, entonces hay algunas soluciones de compromiso entre esas cosas para no tener que eso o ser puramente compilados o ser puramente interpretados, entonces por ejemplo se compila hasta un nivel intermedio entre el lenguaje de programación y lenguaje de máquina y eso hace que el análisis sintáctico este que les decía, o sea si yo tengo algo puramente interpretado cada vez hace el análisis sintáctico, cuando hago este enfoque intermedio en realidad ya el análisis sintáctico lo hice una vez sola ya puedo chequear que las variables sean del tipo que tienen que ser, que esté haciendo las cosas razonablemente y después solo tengo que interpretar el código, y otra solución y otra solución de estas características es los compiladores que se llaman ya distintas, que básicamente lo que hacen es me generan un código compilado pero chequean si yo el código fuente que hice es más nuevo o sea si yo compilo una vez, no, si yo compilo una vez ya tengo un ejecutable, si yo no hice cambios acá lo estamos pensando desde el lado interpretado, si yo no hice cambios sobre el archivo no tí es sentido que reinterprete todo el archivo porque el ejecutable que genere ella me va a servir, si en algún momento yo modifico algo en el archivo tiene que generar otro ejecutable y eso se hace de alguna forma automáticamente, Java esto que les decía que sirvió para el auge de internet, usaba una máquina virtual Java y en realidad era un código intermedio, era este primero de los enfocques que yo les decía, o sea el desarrollador en Java generaba ese código intermedio que era lo que yo me bajaba en la máquina y eso se ajustaba a mi máquina específica cuando yo ejecutaba, ahora el segundo paradigma que les dije de los compiladores, ya este intime es el que usa por ejemplo, punto net hace ese tipo de cosas, eso se hace baja, el código genera un ejecutable y si yo no cambio el código, usa siempre el mismo ejecutable, más lavo y en día hace eso para que las octavos todavía no, pero más laable va a hacer que si yo escribo un programa lo trata de convertir en un ejecutable, si yo no toco más el archivo, usa el ejecutable ese que genero porque va a andar más rápido, no tiene que interpretar cada vez, bueno con eso dejamos por hoy el lunes con Ernesto van a ver octavos y con migos retoman el lunes siguiente, acuerdense que el miércoles no hay clase.