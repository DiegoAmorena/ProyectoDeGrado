 Vamos a comenzar entonces con la clase de hoy, con la clase 2 del curso de computación 1. Como en la clase pasada, vamos a seguir familiarizándonos con la herramienta que vamos a usar de trabajo, la computadora. La clase pasada nos centramos en arquitectura, entender un poco cuáles son las partes más importantes de una computadora y algunas cosas como bastantes generales de funcionamiento. Como les dije, la clase pasada, arquitectura del computador, es un curso que dura un semestre en la carrera de computación. Eléctrica tiene una asignatura parecida y también dura por lo menos un semestre. Obviamente que lo que vimos es, son grandes pinceladas para que tengan una idea de cómo funciona una computadora. Hoy nos vamos a mover un paso más arriba. Nosotros estuvimos hablando del hardware, los fierros. Y ahora vamos a hablar de los sistemas operativos. Nosotros vamos a trabajar después con lenguajes de programación sobre los que vamos a programar, que todavía van a estar más arriba en esta especie de capas en las que vemos como la computadora, cómo interactúan la computadora con los programas. Bien, entonces lo primero que vamos... Bueno, como decía, arquitectura es un curso que dura un semestre y el sistema operativo es otro curso que dura un semestre. Se ven un montón de temas. La idea acá es entender un poco a nivel de usuario qué viene a significar un sistema operativo y por qué es importante la existencia de sistemas operativos. Entonces, vamos a ver como una especie de definición de lo que sería un sistema operativo. O sea, qué es lo que hacen, digamos. Son aquellos que gestionan y coordinan el uso de los recursos del equipo haciendo que los detalles particulares del hardware sean transparentes para las aplicaciones. Y de alguna forma es un intermediario entre los programas y el hardware que es el que tiene los recursos. Capaz que yo menciono esto y les suena como algo super raro y dicen, ¿por qué están importantes estos sistemas operativos? Bueno, voy a mencionar qué tipo de recursos son los que gestionan y ahora voy a poner algunos ejemplos de por qué esto es útil. Bueno, ¿qué recursos son los que manejan la memoria RAM, el procesador, la captura y el despliegue de información? O sea, cuando yo toco el teclado y eso aparece en la pantalla, la captura es lo que yo... lo que hace cuando yo escribo en el teclado y el despliegue de información es lo que hace cuando me muestran la pantalla. Bueno, el manejo de los medios externos en los que pueda grabar datos, la conexión de red y cualquier otra cosa general que tenga que ver con el hardware de la computadora. ¿Por qué esto es útil? ¿Por qué esto ha servido para, de alguna forma, masificar la computación y simplificarla? Para mí el ejemplo más sencillo para que entiendan eso tiene que ver con los celulares. O sea, la mayoría de las personas hoy tenemos un celular inteligente que tiene el sistema Android o el sistema iOS. Y si ustedes piensan que termina los cursos, hacen todo, no sé, terminan siendo asignaturas de computación y terminan siendo desarrolladores de aplicaciones para celular. Cuando uno tiene que hacer eso, piensen en la cantidad de aparatos distintos que hay hoy en día. O sea, hay... bueno, si estamos trabajando con celulares Apple, no porque básicamente es el mismo fabricante y son todos medios parecidos, aunque hay un montón de modelos distintos. Pero si uno quiere hacer una aplicación que funcione en celulares Android, tiene para empezar, no sé, 20 fabricantes, 30 fabricantes distintos de celulares. Y si uno quiere hacer un experimento, las marcas que se les ocurran, Samsung, Motorola, las que quieran considerar. Y después, dentro de esas marcas, hay un montón de modelos distintos. Si yo no tuviera una entidad que de alguna forma me abstraiga el hardware, me permita, por ejemplo, decirle, sacá una foto. El que desarrolló Instagram para celulares. El que desarrolló esa aplicación tendría que saber cómo sacar una foto en todos los modelos de celulares de todos los fabricantes de celulares posibles. Entonces, eso sería una tarea prácticamente inabordable. Estarías todo el tiempo haciendo ajuste. ¡Uy! Salió un modelo nuevo, tengo que reprogramar la aplicación Instagram para que pueda sacar una foto en ese celular nuevo que existe ahora. ¿Se entiende eso? Entonces, el modelo que se usa para el desarrollo en realidad es al revés. Yo voy a hacer una aplicación y yo me concentro en ser bueno en lo que yo tengo que hacer. No sé, en Instagram será, no sé, aplicar filtros, las redes de conexiones entre amigos y conocidos y contactos y esto. Ahora, cuando yo necesite sacar una foto, lo que voy a hacer es pedirle al sistema operativo que él se encargue de sacar la foto. Entonces, ¿qué termina pasando? Que cuando un fabricante saca un modelo nuevo, no sé, Samsung saca un celular nuevo, lo que tiene que hacer es que haya una versión de Android que funcione en ese celular y hacer algunos ajustes para que se pueda sacar una foto en ese celular. Pero es el fabricante, de alguna forma, del hardware que termina siendo algo en el sistema operativo para que pueda hacer eso que yo necesito. Estoy poniendo el ejemplo de sacar una foto, pero es cualquier cosa, mandar un mensaje, hacer una conexión a internet, cualquier otra cosa. Yo hago la aplicación, no? Ahora están, no sé, los videojuegos que juegan en red en celulares. Se están pasando mensajes, se están haciendo un montón de cosas, cuando estoy jugando, no? Entran, tengo ahí un hijo que tiene 12 años, juega el Brawl Stars, capaz que alguno de ustedes juega, juega con otros amigos y están jugando en el mismo mundo. Se están mandando mensajes, están combatiendo contra los mismos, no sé qué. Si el que fabricó Brawl Stars tendría que encargarse de toda la comunicación, otra vez tendría que hacerlo para todos los modelos de celulares, para todos los fabricantes, para todo ese tipo de cosas. Con esta idea de yo tengo un sistema operativo, alguien que se ocupa de hacer estas tareas, el que tiene que hacer la aplicación se concentra en hacer lo que él tiene que hacer. Y asume que el sistema operativo me da ese servicio. Por eso a veces pasa que sale una aplicación nueva o una versión nueva y deja de andar para celulares viejos, porque necesita alguna funcionalidad, o necesita algo del sistema operativo, que en algún celular viejo esa funcionalidad no estaba disponible, o cosas de ese estilo. ¿Se entiende? Para eso es que precisamos los sistemas operativos. Puse el ejemplo de celulares, pero esto en realidad también aplica una PC. Nosotros prendemos la PC, tiene Windows, y no nos andamos preocupando ninguna de las aplicaciones, no? Yo que se, entra un chat, manda un mail o algo, y Windows es el que se ocupa de que ese mensaje, no sé, se convierta en conjunto de símbolos y se mande por una conexión de red a la otra persona que yo preciso que le llegue. No el que hace la aplicación. Bueno, y otras cosas que ya mencioné un poco en la clase pasada, pero es esto. Por ejemplo, lo de la memoria, gestionar la memoria, te queda espacio de memoria, y cuando se va a abrir esta aplicación, lo que hablamos de la memoria virtual, la clase pasada, lo gestiona el sistema operativo. Es el sistema operativo el que dice, bueno, como te estás quedando sin memoria, yo te uso esta memoria virtual para que tengas más memoria y no tengas que cerrar aplicaciones, ¿tá? Y eso viene dado por el sistema operativo. El que hace una aplicación no tiene que hacer nada para hacer eso. Y eso es una de las operaciones que el sistema operativo provee. Entonces, bueno, por eso dice acá, no son imprescindibles. O sea, uno podría agarrar y hacer un programa de cero que la computadora aprenda y ejecute su programa y haga lo que quiera que haga, pero en general es poco práctico. Nadie hace eso hoy en día, y todo se sustenta en el uso de sistemas operativos. Se entendió más o menos esta idea. Bueno, en general, entonces, para comenzar a ejecutar los sistemas operativos, seguramente como usuarios ustedes ya lo hayan visto esto, o por lo menos intuyan algunas cosas de las que pasan acá. O sea, primero, en algún dispositivo de memoria estable tiene que estar alojado del sistema operativo. O sea, yo tengo que instalarlo en una computadora. Cuando uno compra una computadora ya le viene instalado. Pero alguien en el disco duro puso el Windows para que el Windows pueda cargar. Si yo compro una computadora completamente vacía y la prendo, no hace nada, digamos. Chequea, hace los chequeos de las memoria y todo eso, y después se queda ahí porque no tiene nada para ejecutar. Lo primero que tengo que hacer es instalarlo en un sistema operativo. Eso va a quedar, como decía, en el disco duro, en alguna forma de memoria estable. Entonces, cuando yo ahí prenda la computadora, lo que va a pasar es que se va a cargar desde el disco duro y se tiene que copiar en la memoria RAM. Todo o una parte, la mayoría de los sistemas operativos, hoy cargan una parte a la memoria RAM y se le ordena que ejecute la primera instrucción. Los sistemas operativos viejos... Bueno, el otro día hablamos de Windows XP. Windows XP, capaz que me estoy acordando... Me puedo estar acordando mal y confundiéndome con alguna versión anterior de Windows. A veces había... pero creo que Windows XP era uno de ellos. Uno prendía la máquina, aparecía el logo de Windows y demoraba un minuto en darme el control, en poder hacer algo. ¿Por qué? Porque cargaba un montón de cosas en la memoria. Y eso demoraba mucho. Hoy en día los sistemas operativos cambiaron un poco esa forma de acceder, porque los usuarios somos un poco más ansiosos, no estábamos dispuestos a aprender una computadora y esperar tres minutos a poder hacer algo. Entonces cargan una partecita y enseguida te aparece, por lo menos, para loguérte, para poner tu usuario, para poner una clave. Lo mismo pasa con los celulares, enseguida que lo prendes. Por más que está cargando un montón de cosas, todavía, y eso, voy a poder usarlo. Bueno, si lo formalizamos un poco, que la otra vez hablamos de las memorias, porque esto también, cuando prende una computadora, seguramente les aparezca estos carteles y van a la sala de máquinas, y ustedes prenden la computadora y les va a aparecer. O sea, cuando yo prendo el equipo, lo primero que ejecuta es el programa de la BIOS, que va a estar almacenado en una EPRON, una de esas memorias que son de solo lectura, que yo no puedo escribir en este tipo de memorias. Lo primero que va a hacer la BIOS es verificar que el hardware básico, que yo lo tengo que haber configurado previamente, está instalado y operativo. ¿Qué quiere decir eso? Bueno, va a chequear. Cuando yo configure la computadora, le voy a decir, tenés un disco duro de tal marca, que tiene tal espacio, estás conectado a un teclado, a un procesador de tales características, a tales cosas que yo las tengo que configurar antes. Lo que hacen ese paso es chequear que esas cosas estén. Puede haber pasado que no sé, se rompa el procesador y esté quemado, o el disco duro se haya desconectado, alguien de los que desarman la computadora, haya desconectado el disco duro y no lo haya vuelto a conectar, o sea, haya desconectado el teclado, entonces lo que va a salir es un cartel que te va a avisar y te va a decir, no encuentro tal cosa. Después de que termina ese proceso de chequeo, que en general salvo que eso, que estemos armando y desarmando computadoras, nunca nos debería pasar que ahí pase algo. Lo que va a hacer es leer los parámetros de instalación desde la CMOS, que es otra memoria, y a partir de eso sabe dónde puede encontrar en el disco duro el sistema operativo. Fíjense que para poder ejecutar el sistema operativo, si ven acá hay algunas cosas que pueden parecer obvias o como demasiado detalladas, es, bueno, si yo no sé dónde está escrito el sistema operativo no lo puede leer. Entonces, tiene que estar escrito en algún lado cuando yo prendo, dónde voy a leer la primera instrucción. Entonces, la BIOS lee el sistema operativo de acuerdo a la dirección que le da la CMOS y carga, este es el diseño que se usa hoy en día, un núcleo de ese sistema operativo en la memoria RAM. O sea, una parte mínima y imprescindible para poder empezar a ejecutar. Cuando termina de cargar eso, o sea, hasta que todo eso no está cargado en la RAM, no puede empezar a hacer nada, cuando todo eso ya se aloja en la RAM, lo que hace la BIOS es le dice a la primera instrucción del sistema operativo, empecé a ejecutar vos y la BIOS deja de hacer cosas. Acá está gráficamente lo mismo para terminar de entenderlo. O sea, yo prendo, la BIOS hace los chequeos del hardware, o sea, tiene los parámetros y los chequea, lee los parámetros del sistema operativo, empieza a leer el sistema operativo, lo carga en la RAM y le dice, empecé a ejecutar vos. Esto pasa cada vez que apagamos y prendemos la computadora. No así cuando suspendemos la ejecución de la computadora, ahí es el sistema, esa por ejemplo es una funcionalidad del sistema operativo, queda en algún estado ahí, el sistema operativo tiene como la capacidad de bajar una imagen del en funcionamiento y cuando vuelvo a aprender, vuelve a levantar esa imagen. Acá no, en ese caso no pasa nada de esto, no actúa la BIOS, no actúa el CMOS, ahí es el sistema operativo que está haciendo eso. Bueno, cuando empieces a ejecutar el sistema operativo, una de las cosas que va a ser es terminar de cargarse en la memoria RAM, o sea, después de que él ya está en control de la máquina, va a tener que seguir cargando un montón de cosas más. Dentro de las cosas que va a cargar, va a ser los programas de control de los diferentes dispositivos y otros programas residentes, ahora voy a hablar un poco más de los programas de control, pero no sé, uno tiene instalado una impresora, uno tiene instalado, no sé, una conexión de red, o algo a través de un puerto USB y precisa poder dialogar con esos dispositivos. Bueno, eso lo va a hacer a través de controladores y cuando uno configura el sistema operativo y tiene que hacer cosas, uno le dice, bueno, necesito este controlador, este controlador, y ya los tiene que cargar para que yo los pueda usar. Bueno, los controladores es eso, tienen que interactuar con ese tipo de cosas, por ejemplo, el controlador del disco duro, el controlador de la impresora, pero también hay programas residentes, por ejemplo, si uno instala un antivirus, los controladores van a empezar a funcionar ahí, enseguidita, que empezó el sistema operativo, eso es lo que lo vuelve seguro de alguna forma. Entonces, el sistema operativo tiene que, esto, levanta los controladores y esos programas que se le llaman residentes, o sea, que están ejecutando desde el principio que uno prende la computadora, los tiene que cargar ahí en ese momento. No es exactamente un programa residente, pero funciona como si lo fuera. Por ejemplo, la búsqueda en Windows. Uno quiere buscar dentro de todo el disco duro de las carpetas, si ustedes escriben comandos ahí en la parte baja, en la barra del lado izquierdo, uno puede buscar en nombre de un archivo y se los va a encontrar en cualquier lugar que esté. Eso es, en realidad, como un proceso del sistema operativo que está ejecutando, que es el Windows Search, que uno puede apagarlo. Cada vez pasa que... O sea, el Windows Search, para buscar, hace una indexación que ocupa espacio y a veces si uno tiene el disco duro muy lleno y no le da lugar, si uno apaga el Windows Search, la computadora anda más rápido que si lo tiene prendido. No sería exactamente un programa residente, eso, pero para que se hagan una idea. Y ese tipo de cosas son como aplicaciones que va cargando a medida que va aprendiendo el sistema operativo. ¿Se entendió esa idea de que son los programas residentes? Más o menos. El otro ejemplo que puede empezar es el antivirus. Y bueno, hoy en día pasa con un montón de cosas. Cuando ustedes le dan al lado derecho y ven y apretan y le salen un montón de iconitos ahí, esos son cosas que la computadora ya cargó y tiene prontas para que ustedes puedan usar. Todos esos son programas residentes. Bueno, y a partir de ese momento, cuando termina de hacer la carga de los controladores y los programas residentes, queda la espera de órdenes del usuario y atiende interrupciones. Acuérdense que lo mencioné de la clase pasada, funciona por interrupciones. Cuando yo escribo, detecta que yo hice algo y a partir de eso empieza a hacer algo en la computadora. En muchos casos, hoy en día, el usuario puede hacer cosas antes de que termine este proceso de carga, pero a veces pasa que si empiezas a abrir cosas, claramente la computadora está trabajando y te funciona como un poco lenta o errática al principio y es porque no terminó de hacer ese proceso. Entonces, bueno, este modelo que les comentaba hoy de las aplicaciones, por un lado, que cada uno que tiene que hacer una aplicación básicamente se concentra en lo que le interesa a él porque va a dialogar con el sistema operativo y les hablaba de que está el hardware abajo, que es el que se ocupa, o sea, el hardware son los fierros, cómo se da ese diálogo entre el sistema operativo y el hardware a través de los controladores. O sea, el que tenga una computadora en su casa y haya instalado, por ejemplo, una impresora, para ver que para que empiece a funcionar la impresora, la primera vez que la conecta, hoy en día muchos detectan, al enchufar la impresora, automáticamente la computadora detecta que ya se cargó algo y te pone que va a descargar unos archivos, bueno, eso es la controladora para que esa impresora funcione. Ahora, como en realidad uno puede conectar cualquier impresora a una computadora, cada vez que yo le conecte un dispositivo nuevo, lo que va a pasar es que va a ser ese mismo proceso y va a instalar los drivers de todo lo que yo le conecte. A veces pasa que uno conecta, no sé, algo por el puerto USB, un pendrive, no sé, uno está haciendo un trabajo con un compañero, el compañero le presta el pendrive para copiar unos archivos, lo enchufa y te pone, voy a cargar algo para que puedas usar el pendrive, porque si no, no entiende los datos que están grabados en el pendrive. No puede comunicarse con el pendrive, ¿se entiende eso? Entonces, bueno, cuando uno instala el sistema operativo hay un montón de drivers que ya vienen por defecto, o sea, que los va a detectar, la tarjeta de video y otras cosas, pero bueno, no me instala a todos los drivers posibles, sino que la lógica es esta, cuando yo enchufo algo, detecto eso que estoy conectando y hago la instalación del driver. Bueno, algunos ejemplos de sistemas operativos, los más famosos y los que seguramente ustedes conozcan, sean Windows o el sistema operativo de las Macs, Linux también, en realidad Linux viene relacionado con los sistemas Unix más antiguos, la facultad tuvo equipos que funcionaban con sistemas Unix Solaris y con el Unix Berkeley, pero te ha dado hace años que ya la facultad se pasó definitivamente a Linux. Windows, que es bastante común y bastante, no sé, para los usuarios que lo conocen, es relativamente sencillo de usar. El sistema operativo de las Macs, que tiene algunas ventajas, no sé, la gente que trabaja con temas de diseño gráfico, ese tipo de cosas, en general prefiere los entornos Macs. En principio no hay una preferencia por ninguno de estos sistemas, depende de lo que uno preciese hacer y con lo que uno esté familiarizado como usuario. Yo que sé, los sistemas Linux se pusieron de moda, por llamarla así de alguna forma, hace unos, no sé, 20 años capaz por todo el tema del código libre, digamos, en los sistemas operativos Windows, Microsoft programó ese sistema operativo y las personas no saben cómo funciona, digamos, el código de ese sistema operativo no está disponible para nadie. Los sistemas operativos Linux, no todos, pero hay un montón que siguen la filosofía de que el código está disponible. Uno podría agarrar y sentarse y leer todo el programa y entender cómo funciona. En general, hay gente especializada en algunas partes de ese sistema operativo, no es que todo el mundo conoce todo, estamos hablando de programas que seguramente ocupan millones de líneas de código, o sea que por más que uno tenga el código no es real que uno puede sentarse y entenderlo todo, pero eso en general también está relacionado a veces con que haya menos virus en Linux que en Windows, digamos, porque al ser de código abierto y haber mucha gente trabajando sobre ese código, cuando hay una vulnerabilidad, un error de programación, como pasa en todos los sistemas que puede haber, el Linux se detecta y se avisa y se corrige. En Windows, como en general no se conoce el código, eso no pasa y en general se detectan nuevos virus cuando ya hubo un ataque de ese virus, digamos. En general los virus explotan algún error en el código que muchas veces pasan porque bueno, no sé, gente con experiencia diseña ataques especiales para esos sistemas operativos. Después, todos los sistemas en general son equivalentes, depende de lo que uno precisé hacer, uno puede programar sobre cualquiera de ellos. En general, acá en el curso, por ejemplo, cuando vayamos a la de PC, vamos a ir a la de Windows, pues suponemos que es con la plataforma que están más familiarizados ustedes, pero se podría hacer lo mismo que vamos a hacer y todo lo que vamos a hacer en este curso, en plataformas Linux sin ningún problema. Bueno, como les decía, eso, un sistema operativo, básicamente, eso me permite como encapsular o esconder el funcionamiento del hardware de un dispositivo. Hay sistemas operativos para celulares, fue el ejemplo que puse hoy, los más populares y conocidos, son Android, de Google, iOS, de Apple, y Google, hay algún sistema operativo que han tenido que desarrollar para algunas marcas de celulares chinos, creo que es Huawei, que tiene un sistema operativo propio, que en realidad creo que usa cosas públicas de Android y le tuvieron que cambiar las cosas. Creo que lo comenté, la clase pasada, cuando hablamos de arquitectura, pero entre China y Estados Unidos vienen con este problema, bueno, por disputas políticas, por ver quién es la potencia más grande y por problemas comerciales y todo eso, entonces ya desde la época de Obama, más o menos, hay ciertas tecnologías desarrolladas en Estados Unidos que están prohibidas, que se las vendan a China, eso yo les hablé de las tarjetas de video, por ejemplo, algunas arquitecturas de tarjeta de video, las que están muy pensadas como para inteligencia artificial y eso no se las pueden vender al gobierno chino, por ejemplo, y acá hubo algunos líos con Huawei, creo que con Huawei me puede estar equivocando el fabricante por temas de privacidad, que decían que guardaba información y se espiaba la gente o algo así, y entonces Android no podía seguir funcionando, básicamente los prohibieron que siguieran haciendo versiones para ese fabricante de hardware. No voy a entrar ahí en detalles todo el tema de los datos personales y la confiabilidad, es algo que debería preocuparles a futuro, es algo que está bastante... O sea, más allá de... No, también con el tema del 5G, esta discusión también estuvo, o sea, Huawei también fabrica tecnología 5G y en algunos países se prohibió usar esa tecnología. Y bueno, puede ser ahí un poco... O sea, es un problema de la sociedad actual, digamos, y va a ser de futuro, de alguna forma... No sé, están estos fabricantes chinos de los que hay una cierta desconfianza de si se roban los datos o los usan para otros fines y en general muchos de nosotros usamos Google, usamos Gmail y vemos que continuamente usan nuestros datos para hacer otras cosas, pero, ta, en el fondo hay... como discusiones políticas y ese tipo de cosas, pero en general hay muchos fabricantes que están empezando a hacer cosas para que tus datos no puedan ser usados para otras cosas. Pero estamos bastante lejos de eso. Después, sorprendentemente, con todo esto que estamos hablando, o sea, si bien Windows es una de las plataformas, en sistemas operativos de PC, Windows tiene más penetración que Linux, hay más gente que usa Windows que la que usa Linux, sin embargo, en sistemas operativos de celulares nunca logró posicionarse como una tecnología, un sistema operativo o algo que la gente usara masivamente. Tuvo varios intentos, Windows Phone, Windows 10 Mobile en algún momento, pero llegó tarde a, digo, los dispositivos que son marca Apple, tienen su propio sistema operativo y juegan por afuera, juegan en... o sea, no va a haber un Windows que ande en algo Apple porque Apple no va a permitir que otro sistema operativo ande en sus plataformas. Pero para los dispositivos más generales, o sea, de otros fabricantes, Google llegó primero con Android y por más que haya hecho un montón de esfuerzo Microsoft durante muchos años por hacer un sistema operativo que le compita, no lo ha logrado. Y fíjense que es bastante raro, porque uno usa la computadora en Windows, lo más natural sería que su pasaje al celular sea en el mismo sistema operativo y que sea fácil interactuar entre las dos cosas. Está, está, está fuerte el uso de la gente de... por parte de la gente de Android, que nunca logró hacerle mella, digamos, este. Y básicamente, lo último que estuve viendo sobre esto, porque Windows 10 Mobile ya estaba discontinuado, es que hoy en día lo que hay es como una especie de launcher que te permite correr como algunas funcionidades de Windows pero ya no se están planteando hacer un sistema operativo, digamos, de cero, que ande en un coso, porque está, es como que de alguna forma reconocieron que ya perdieron ahí y que no tiene sentido seguir intentándolo. ¿Verdad? Se entendió más o menos esto. Bien, como en todas estas clases, que son así más generales y eso, habrán notado que a la gente de computación le encanta clasificar las cosas para tratar de entenderlas, hacer taxonomías y ver características distintas entre las cosas. En general, los sistemas operativos hay como dos características que nos suelen interesar o que históricamente solían interesar. Una tiene que ver con la cantidad de usuarios que pueden trabajar concurrentemente en un dispositivo que tiene ese sistema operativo, o sea, cantidad de usuarios que pueden trabajar a la vez. Tengo una PC. ¿Cuántos usuarios pueden estar a la vez trabajando sobre la misma máquina? Entonces, bueno, tengo los que son monosuarios en los que solamente pueden trabajar un usuario a la vez y tengo los multiusuarios que permiten, en forma simultánea, trabajar más de un usuario a la vez. ¿De los que están acá cuántos usan Linux? Ninguno. Bueno, los sistemas operativos Linux en general son multiusuarios. ¿Están? Ustedes pueden ver si van a la sala Linux, puede haber estudiantes haciendo una tarea de programación y accediendo remoto desde la casa y trabajando la misma máquina que hay un estudiante que tiene ese momento tipeando en esa máquina, incluso ejecutando sus programas ahí en esa máquina. Es una característica como súper útil. Se usa bastante. ¿De los que están acá cuántos usan Windows? Windows es multiusuario o monosuario. ¿Monosuario? Pero también se puede controlar los videos y eso es manejarlo desde teléfono de vez en cuando. Más o menos. Es multiusuario. Existe una aplicación que en la facultad no está instalada y que se puede usar, que se llama Remote Desktop, por lo menos se llamaba así antes, no sé cómo se llama hoy en día, que permite que una persona que está remoto a la computadora pueda acceder y trabajar sobre esa computadora que tiene Windows. En general no es una aplicación que instalemos por defecto en las computadas que tenemos en nuestras casas o eso, por eso no sabemos que existe, digamos, pero eso, los sistemas operativos modernos, todos tienden a ser multiusuarios porque es eso. Como tenés más de un core, yo que sé, puede ser un equipo que tenga ocho cores y eso, pueden trabajar dos personas concurrentemente sobre la misma. Cada uno ve solo sus datos, no puede ver los datos del otro, pero eso es una funcionalidad súper útil y Windows la tiene también. ¿Se les ocurre algún ejemplo de sistemas operativos monousuarios? Y que creo yo, ¿no? ¿Pero que van a seguir siendo monousuarios? ¿Que no tiene sentido que sean multiusuarios? Los celulares. ¿Por qué querríamos que alguien remoto a la vez esté usando el teléfono y compitiendo por los recursos? ¿No parece tener sentido? ¿No parece ser una funcionalidad útil? Al momento actual no está soportado y yo creo que no va a estar porque es eso. No es algo que parezca que sirva para algo. Y es más, como solemos tener información sensible en nuestros celulares, nos expone a posibles ataques o cosas, entonces yo no creo que eso vaya a pasar. ¿Se entendió esta idea de multiusuario, monousuario más o menos? Bien, entonces, a medida que ha pasado el tiempo, casi todos han convergido a esto y en la cantidad de tareas concurrentes que puedan realizar, están los monotareas, que básicamente están haciendo una cosa a la vez y los multitareas, que pueden hacer más de una tarea a la vez, con el advenimiento del paralelismo a las computadoras, lo que contaba la clase pasada, todos los sistemas operativos han ido hacia multitareas. Igual es interesante que, que incluso cuando teníamos un procesador solo, había varios sistemas operativos que no eran monotareas, que lograban hacer algunas cosas, como de compartir el tiempo entre procesos y ejecutar un poquito cada cosa para que las cosas fueran ejecutando como si fueran multitareas. Pero bueno, en esto, hoy en día, todos los sistemas son multitareas. Por lo menos los que usamos, como un mente. Incluso los de los sistemas operativos tienen, bueno, ustedes lo habrán visto, tenés varias aplicaciones abiertas, los celulares ya son quadcore, o sea, puede ser que alguna implementación, bueno, en realidad la implementación del sistema operativo es multitarea, pero puede ser que uno lo use en algún contexto restringido, alguna cosa, sobre todo la gente que trabaja en sistemas enbebidos, o que hace internet de las cosas, esos que no se ponen algún chip en algún lado a sacar fotos y procesar esas imágenes, yo qué sé, para, no sé, detección de plaga en fruta en el campo. No ponen una PC, ponen una placa más chiquita, con alguna cosa más sencilla, pero igual, si están usando Linux, el sistema operativo es multitarea. ¿Se entendió más o menos esto? Bien, esta es una aclaración nada más, que a veces genera dudas, que tiene que ver con qué, con el interfaz con el que interactuamos con el sistema operativo. Cada sistema operativo, por lo menos, va a tener un interfaz con el usuario, y eventualmente puede tener más de uno. No sé, estamos muy acontrobrados a Windows, que tiene todo el sistema basado en ventanas, si uno va a donde puede tipiar comandos en Windows, y uno pone CMD, le va a salir una ventanita negra, que básicamente es un interfaz para interactuar con el sistema operativo, en lo que uno va escribiendo comandos, o sea, es una ventana negra, texto blanco, y uno va poniendo, no sé, puede navegar entre las carpetas, por ejemplo poniendo Condir, le dice qué archivos hay en un directorio, puede hacer CD el nombre de una carpeta para moverse una carpeta, y puede copiar los archivos escribiendo comandos, digamos, y no usando el interfaz visual. O sea, la funcionalidad del sistema operativo es la que me permite mover los archivos, copiarlos, renombrarlos. El interfaz es lo que me permite ver lo lindo con ventanas, y que eso sea fácil, pero no tiene que ser la única forma en que yo haga eso. Justo no hay ninguno que use Linux, pero en Linux es más, uno puede elegir el sistema de ventanas que usa, digamos, y hay más de uno disponible, en Windows en realidad es como uno solo. Entonces, bueno, hay como una especie de protocolo entre el interfaz y el sistema operativo, ahora vamos a ver, porque básicamente el interfaz es una aplicación más. A veces para el usuario es difícil verlo, pero el interfaz con el que yo estoy interactuando, o sea, cuando yo agarro y abro los archivos y empiezo a mover carpetas y hacer ese tipo de cosas, yo estoy interactuando con el interfaz que me da el sistema operativo, pero no es parte del sistema operativo. Entonces, como les decía, hay interfaces de diferentes características, uno puede ser solamente de texto, esto es lo que yo les decía que puedo usar en Windows usando el comando CMD. Microsoft, antes de tener los sistemas Windows, tenía los sistemas DOS, que estaban todos basados en eso, pantalla negra, escribía comandos, no había ventanas, estamos hablando de, no sé, poquito, 91, 92, la verdad que no me acuerdo exactamente cuándo. Los sistemas Linux tienen la gel de Linux, si alguna vez estuvieron en las salas de Linux y en los estudiantes de computación, van a ver que más allá de estar usando la navegación y eso, van a tener ventanas escribiendo comandos y cosas de ese estilo, pues permite automatizar fácilmente tareas, hace uno quiere que algo se haga muchas veces, es más fácil escribir un archivo con esa cantidad de instrucciones y pedir que eso se ejecute muchas veces, que uno irá haciendo la mano moviendo carpetas y copiando archivos. Bueno, esos son los de texto, digamos, y después tenemos los gráficos, que bueno, el de Windows, como les decía, es único, el de Apple también, y bueno, en Linux uno tiene un montón de opciones para elegir, en general, no sé, siempre cada tipo de Linux viene con un interfaz por defecto. Seguimos en esto de, como de ir subiendo en esta especie de capas, hablamos del hardware primero, después hablamos del sistema operativo, y para terminar de entender esto del software y qué cosas forman parte del sistema operativo y cuáles no, vamos a usar esta terminología que cada vez se usa un poco menos, pero que es clásica, que habla de software de base o programas de base. ¿Qué son esos software de base o programas de base? Bueno, el interfaz gráfica, el sistema operativo, como mencionaba, los editores de texto, el navegador de internet, el administrador de correo electrónico, una planilla electrónica, un manejador de base de datos, ¿por qué hacemos esta salvedad? Para que ustedes acuérdense lo que era el sistema operativo, el sistema operativo es eso que interactúa con el hardware y me permite hacer las cosas, el navegador de internet no forma parte del sistema operativo, lo que pasa que hoy en día cualquier sistema operativo que vos instales viene con un navegador de internet, pero en realidad es una aplicación distinta que podría estar instalada o podría no estar instalada, lo mismo es el blog de notas, lo mismo es tener un programa de manejo de correo electrónico, lo que hoy en día un instala Windows y viene ya con un montón de otros software que es útil y sin el que uno no podría capaz de usar la máquina, o la mitad de las cosas que uno quiere hacernos las podría hacer, pero es importante que entiendan que eso no forma parte del sistema operativo, se entendió esa diferencia, otra cosa es que cuando uno lo instale venga todo eso, si hoy en día uno instale a Linux también viene con todo eso, porque saben que el usuario necesita esas aplicaciones, pero no forma parte del sistema operativo, después me va a pasar en que en varios contextos de trabajo yo voy a tener lo que se llaman aplicaciones de usuario, que son en realidad aplicaciones específicas que van a tener sentido para un usuario en particular, yo que si estamos hablando en la sección de sueldos por ejemplo acá de la facultad o de un trabajo y seguro que va a tener un software de liquidación de sueldos, porque lo va a precisar para poder gestionar todo lo que tiene que ver con el pago de los sueldos, si es una empresa que factura va a necesitar un sistema de facturación, algo para el manejo del sistema contable o la gestión de stock, esto podría ser incluso en una fábrica o algo de ese estilo que tenga que gestionarlo, bueno estos software van a ser específicos y cada necesidad de un usuario va a ser que o compre un sistema de ese tipo o desarrolla un sistema de ese tipo, pero fíjense que este tipo de aplicaciones están como un nivel, como un escalón más arriba, o sea son súper específicas, esto yo no preciso que cualquier computadora tenga esto para usarlas, entonces por eso se hace esta distinción entre software de base digamos y aplicaciones de usuario, software de usuario, en el software de base como les decía hay un montón que son aplicaciones y uno podría verlas al mismo nivel que estas otras digamos, pues yo les digo que esta categorización entre software de base y aplicaciones de usuario cada vez se tiende a usar un poco menos, bien entonces venimos hablando de las aplicaciones y eso y una aplicación que va a ser muy importante para nosotros van a ser los editores de texto, ¿Por qué? Porque vamos a programar, programar básicamente es escribir un conjunto de instrucciones o comandos para que la computadora haga algo y para eso vamos a precisar editores de texto para poder hacerlo, entonces el primer tipo de editores de texto son los editores de texto plano, cuando uno se refiere a texto plano está hablando de texto ASCII o sea texto que no tiene ningún tipo de formato se acuerdan que la clase pasada vimos la tabla ASCII, tenía las letras en minúscula, las letras en mayúscula, los números y tenía un montón de caracteres especiales que era no sé dar un enter y cosas de ese estilo, pero yo no podía, no tenía una letra subrayada, no tenía letras en negritas, no tenía tamaño de las letras, entonces en este tipo de editores en general lo que yo voy a poder hacer es escribir algún tipo de texto en lo que lo importante es lo que está escrito, o sea voy a tener un solo tipo de tipografía, o sea un solo tipo de letra, no voy a tener gráficos, no voy a tener colores y en general este tipo de editores son los que me van a servir cuando yo quiera suministrar información a un programa o sistema o sea para programar yo voy a usar editores de texto plano, ustedes van a tener el lunes que viene la presentación con Ernesto y después las clases en la sala de máquinas van a usar un editor que forma parte de Octav donde pueden escribir las instrucciones y van a ver una cosa que les va a llamar la atención por esto que yo les digo, el editor de Octav reconoce algunas palabras especiales que ustedes van a usar, no sé la palabra function, las palabras wild, for, if y ese tipo de cosas y se las va a pintar de colores, ahí a uno le podrías arruir y va a decir bueno, pero vos me estás diciendo que no hay colores, que no hay esto y cuando yo uso un editor real me pintan las palabras de colores, bueno el que está pintando eso es el editor, cuando uno guarda el archivo, si ustedes lo abran en otro editor van a ver que las palabras no tienen colores, lo pasa de claro, cuando yo programo en Octav, Octav sabe que la palabra if tiene un sentido especial en la programación, entonces me la resalta para que yo la vea más fácil, la palabra function, la palabra wild, ahora cuando trabaja en la semana que vi, la otra semana en la sala de máquinas, lo van a ver, es importante ahí que no les genere confusión eso, o sea no es que se está escribiendo esa palabra en ese color, sino que la estoy viendo en ese color solamente, es el editor el que me la muestra de esa forma, ¿por qué? porque imagínense cuando uno escribe programas de 50 líneas de código, si todo se ve sin ningún tipo de jerarquización, es difícil de leer el código. ¿Qué editores detecto hay? bueno el más conocido es el blog de notas seguramente que alguna vez lo hayan usado y bueno, estos son de Linux y estos ya están más orientados a veces a programación, más más y sublime es eso, si yo escribo sublime por ejemplo me deja elegir asociado a un texto en qué lenguaje está escrito ese texto y en función de eso me pintan las palabras especiales de colores, este se usa bastante en desarrollo, ustedes van a usar un editor que ya viene en octav, lo van a ver la clase que viene es un entorno en el que yo puedo ejecutar cosas y a la vez puedo escribir código y eso me permite escribir cosas y probar que hacen de forma bastante interactiva, eso no suele pasar en la mayoría de lenguajes de programación. Por otro lado voy a tener los procesadores de texto que van a tener texto con formato enriquecido, en ese caso yo voy a poder agregar elementos que me van a permitir organizar y jerarquizar la información, esto es lo que están más familiarizados, por ejemplo Word es uno de este tipo donde yo puedo usar diferentes tipos de caracteres, subrayado, negrita, tamaño, colores, pone imágenes y perlinks y esto en realidad está más orientado a que sea leído por una persona, o sea si yo agarro un Word y escribo un programa en octav y escribo un programa en el lenguaje de octav y se lo dio octav, octav no va a saber procesar ese archivo porque tiene un montón de otra información que octav no sabe qué hacer con ella, se entendió de eso, entonces cuando uno vaya a hacer un programa o usa el editor de octav o usa el blog de notas o algo similar pero no vayan a usar nunca un procesador de texto con formato porque lo que les va a pasar es que cuando le pidan ejecutarme este archivo les va a dar error, ¿Vamos? Bueno, vamos a empezar a hablar de lenguajes de programación, o sea, hablamos de hardware, hablamos de sistemas operativos, de los tipos de aplicaciones que hay, estas de base, las otras más orientadas en usuario y ahora vamos a hablar de lenguajes de programación que nos van a permitir a nosotros hacer programas, hacer aplicaciones, nos vamos a llegar a hacer aplicaciones como las que suelen usar, pero vamos a hacer programas que hacen que la computadora compute o haga un cálculo o resuelva un problema concreto. Entonces, bueno, ¿Qué es un lenguaje? Es un conjunto de símbolos y reglas acerca de cómo se organizan esos símbolos, esta es la definición del lenguaje general, en un lenguaje de programación va a ser lo mismo pero aplicado a la programación, o sea, yo voy a tener un conjunto de reglas y de símbolos que voy a poder usar para poder escribir ese programa, si yo no cumplo con esas reglas, lo que va a pasar es que el programa no va a funcionar, me va a dar un error, me va a decir, no entiendo lo que me quieres decir, es bastante parecido con el símil, con el idioma, con el lenguaje castellano o ese tipo de cosas, si yo construyo más las oraciones, lo que pasa es que ustedes no me entienden lo que yo digo, bueno, si yo cuando le escribo en un lenguaje de programación un programa a la computadora y escribo las cosas mal, digamos, no respeto las estructuras, lo que va a pasar es que la computadora no va a entender lo que yo quise decir, en el caso de la computadora es peor porque básicamente aplica un algoritmo y trata de hacer eso, entre dos personas capaz que yo me expreso mal pero si la otra persona pone buena voluntad termina entendiendo lo que yo quise decir, la computadora aplica reglas y si no te ceñiza las reglas, no te entiendo, estás haciendo algo mal. Hablamos la clase pasada del tema de los 0s y 1s y todo el tema del binario y eso, cada computadora tiene un lenguaje de máquina, digamos, que es en binario, digamos, que son tiras de 1s y 0s de instrucciones que entiende esa computadora. Lo que nos va a permitir hacer un lenguaje de programación es que nosotros podamos escribir un algoritmo, o sea, un conjunto de instrucciones en un lenguaje de más alto nivel y en algún momento eso se va a convertir a esas instrucciones de 1s y 0s que va a usar la computadora. Se entiende eso más o menos, o sea, antiguamente, no sé, yo qué sé. Hay gente que hoy en día trabaja en cosas en las que programan muy bajo nivel y termina programando prácticamente el lenguaje de máquina, pero son aplicaciones muy concretas y muy específicas. Cuando empezaron las primeras épocas de la programación y ese tipo de cosas en computador en la década del 60, 70, lo lenguaje de programación empiezan a surgir por ahí, pero lo primero se programaba en eso, en las instrucciones de la máquina, en tiras de 1s y 0s o instrucciones de muy bajo nivel. A veces las máquinas tienen otra cosa que se llama lenguaje ensamblador, por lo menos esas tiras de 1s y 0s me los transforman en palabras que tienen algún sentido. Pero bueno, lo que ha pasado con el paso de los años es que uno tiende cada vez a programar con más nivel de abstracción, uno no quiere hacer cosas tan abajo nivel en general. Entonces es fundamental el uso del lenguaje de programación que permiten que yo pueda definir como ideas a más alto nivel, más conceptuales, no sé, hablábale otra vez del modelado del río a la plata, el tema este del sedimento y todo eso. En realidad, yo voy a tener un problema ahí de ecuaciones enderivadas parciales, de elementos finitos o algo en lo que yo quiero que cada posición del río en función del sedimento que hay en las posiciones cercanas y cómo viene la marea calcule en el paso siguiente cuál va a ser el sedimento en ese lugar. Bueno, eso es un problema matemático, son unas ecuaciones que yo tengo que resolver. O sea, qué tiene que ver con los 1s y 0s. O sea, yo quiero un lenguaje en el que le pueda poner expresiones matemáticas y me puedas calcular las cosas. Se entiende, yo necesito mucha más abstracción. El ejemplo que les ponía de los molinos de viento y los tipos de pala, lo que yo quiero poderles decir es, bueno, tenés estos diseños, evalúamela a ser un simulador. No quiero escribir en instrucciones de bajo nivel de una computadora o en unos y ceros. Entonces, los lenguajes de programación me simplifican la vida. Es lo que hace que yo pueda resolver problemas más difíciles que si no me perdería el tiempo aprendiendo a programar en assembler o en 0s y 1s. Hay muchos tipos de lenguaje de programación. Depende un poco para qué lo quiera uno el lenguaje que va a usar. Los lenguajes científicos que se suelen usar. Voy a hablar primero de Mad Lab y Octav. Mad Lab es un lenguaje que es hecho por una empresa. Octav es como una versión libre, bastante inspirado en Mad Lab. Con menos librerías disponibles. Mad Lab te da un montón de librerías que te resuelven ya un montón de problemas. En Octav hay una comunidad de gente que desarrolla cosas similares, pero bueno, a veces no. No tiene todas las cosas que tiene Mad Lab. Nosotros vamos a usar Octav. Primero porque es eso. Ustedes lo pueden bajar o lo pueden instalar. Es gratuito. Mad Lab las licencias salen como $5,000 dólares. No tiene sentido. Después, está Fortran que es otro lenguaje científico. Este es un lenguaje bastante viejo y que se viene usando como desde la década del 70. Ha tenido muchas versiones. Los que usaban esto, mayoritariamente, originalmente eran los físicos. Hay mucha gente que labura hoy en día en el instituto de mecánica. Toda la gente que trabaja como en termo aplicada. La gente que trabaja con curto y eso. Que usan Fortran para programar. Se sigue usando hasta el día de hoy. Después hay software que tienen que ver más con cosas comerciales, como los sistemas de bancos, bases de datos y almacenamiento. Yo que sé, sistema de liquidación de UT, que suelen usar. Cobo es algo viejo que todavía sigue existiendo, pero generalmente con códigos legados. Se usan bastante las bases de datos programadas en SQL o PL-SQL. Después hay algunos lenguajes que persiguen objetivos genéricos. Que son multipropósitos. O sea, sirven un poco para cualquier cosa. El que más se usa en computación suele ser C y C++. Que se usa bastante. Python también es un lenguaje que se está usando bastante ahora. Sobre todo para los temas de ciencia de datos y eso. Que da varias posibilidades, digamos. Después hay software específico para generar simulaciones. Si uno tiene que hacer simulaciones de estado finito. De cosas... Justo las simulaciones que se me ocurren, se pueden resolver analíticamente. Pero, por ejemplo, si uno quisiera hacer un modelo en los supermercados. Los supermercados usan modelos... Alguien lo estudió, los modelos de cola. Para minimizar el tiempo de espera de la gente cuando tiene que pagar. Ustedes son relativamente jóvenes, pero seguramente lo vieron. Hace 10 años atrás o 15 años atrás los supermercados, la gran mayoría tenía una caja. Tenía 10 cajas y había 10 colas distintas. Seguro que lo llegaron a ver. Hoy en día la mayoría de supermercados tienen una caja sola. Una cola sola y vos vayendo a la caja que va quedando libre. Ese modelo se puede estudiar analíticamente, no hace falta simularlo. Eso hace que el tiempo de espera de la gente sea más bajo que en el otro modelo. Con simula uno puede generar una simulación y estudiar los tiempos medios de espera. Y ese tipo de cosas. Puede haber software específico. Para hacer animaciones, en algún momento Flash era muy usado. Se usan bastante menos. En la carrera de computación se ven otros paradigmas distintos al que vamos a ver en este curso. Que tiene que ver con programación funcional o programación lógica. Pero bueno, eso no me voy a poner a explicar. Eso se esquema en ideas un poco distintas a las que vamos a ver en el curso. Si alguna vez escucharon hablar a seguramente alguno con el tema de la aplicación Coronavirus Ui capaz que lo sintió hablar a Jodal, el dueño de Arteche. Arteche es una empresa que hace un software uruguayo que se llama GeneXus. Creo que ahora la vendieron, la empresa y eso. Es como un software que te ayuda a desarrollar otros sistemas. El grueso de las cosas, o sea el motor que funciona bajo nivel usa el paradigma de este lógico, digamos. Usaron ese paradigma para desarrollar su aplicación. En computación hay un curso de un semestre que enseña programación funcional y otro curso de un semestre que enseña programación lógica. Pero bueno, es bastante distinto a lo que vamos a ver en el curso. Bueno, entonces estábamos hablando de cómo un lenguaje de programación se va a pasar a un lenguaje de máquina. Básicamente van a haber dos estrategias distintas que van a tener características completamente distintas y van a determinar funcionamientos distintos. Por un lado está la compilación y por otro lado está la interpretación de los lenguajes compilados, digamos, o los lenguajes interpretados. ¿Qué pasa con los lenguajes compilados? A ver, ejemplos de lenguajes compilados son Fortran, Cs, MAs, MAs, de los que yo nombré, de los que estaban en la presentación anterior, en la PPT anterior, esos son compilados. ¿Qué va a pasar en un lenguaje compilado? Bueno, el programador va a escribir su programa fuente, o sea, su código, va a escribir el código que puede tener funciones, puede estar partido, no quiere decir que tiene que escribir un único archivo que son miles y miles de líneas, sino que podría partirse en archivos, tener algún tipo de relación entre esos archivos y con esos archivos va a llamar a un compilador, un programa que es el que se va a encargar de generar el código máquina. ¿Qué es lo que va a pasar acá cuando yo compile? El compilador lo que va a hacer es chequear que lo que yo escriba esté correcto sintácticamente. ¿Qué quiere decir que esté correcto sintácticamente? Esto que les decía hoy del lenguaje, de que yo esté usando bien las reglas del lenguaje en el que estoy programando. Todos los años creo que pongo el mismo ejemplo. Si yo les digo el perro verde, ustedes pueden decir, ¿a qué sentido tiene un perro verde? Capaz que el color no es ese y te estás refiniendo algo que está mal, pero eso es semántica. La oración está bien formulada, o sea, es el perro verde. Si yo les digo perro el verde o verde perro él, ustedes van a decir, no, ahí estás diciendo algo que está mal. Cuando hablo de chequeo sintáctico, de alguna forma lo que está pasando es eso. Lo que está chequeando es que la estructura que yo estoy armando tenga sentido. Ahora eso no quiere decir que eso haga algo que esté bien. Yo puedo escribir algo que sintácticamente es correcto y que semánticamente esté mal. Lo mismo va a pasar con los programas que yo hago en los lenguajes de programación. Cuando yo compilo algo, lo que va a chequear es que yo esté usando las instrucciones correctamente. O sea que si en el IF, por ejemplo, que lo vamos a ver dentro de varias clases, lo siguiente que se espera es una condición, aparezca una condición. Ahora, el compilador no tiene forma de saber si la condición que yo escribí ahí es la correcta para este programa. Lo que va a chequear es que yo si respete la estructura sintáctica de lo que tengo que escribir. O sea, siga las reglas del lenguaje de programación. Si escribo algo que sigue las reglas, pero hace otra cosa distinta a la que yo tengo que hacer, el programa va a funcionar mal, pero va a funcionar. ¿Se entiende eso? Entonces, el compilador lo que hace es chequea esas condiciones semánticas y genera un código máquina. Se va a ejecutar un encadenador después del compilador, que es el que va a generar el ejecutable, que va a ser la tira de unos y ceros. ¿Por qué está ese paso intermedio acá? Bueno, porque como les decía hoy, hay muchas cosas que se usan para aumentar la productividad en computación y una tiene que ver con que existan bibliotecas que hacen algo. Por ejemplo, en los ejemplos que ponía hoy, si yo creo que estoy haciendo un modelado de algo y en el medio resuelvo una ecuación en derivadas parciales. Si existiera una biblioteca que resuelve ecuaciones en derivadas parciales, en mi código lo que yo pondría es llamar esa biblioteca y ejecutar esta función. Ahora, en mi programa no están los unos y ceros de cómo resolver eso. En mi programa solo está la llamada de esa función. Yo le voy a decir, ah, en la biblioteca Solver de ecuaciones en derivadas parciales, resuelveme, llama tal función que resuelve este tipo de ecuaciones en derivadas parciales. Entonces, primero se hace esa compilación, se obtiene algo que ya se empieza a parecer a unos y ceros o tiene unos y ceros, pero en algún lado dice, acá llama la función tal, de tal otro biblioteca, acá llama a tal cosa. Entonces, en esta etapa de lo encadenador, lo que hace es se obtienen los unos y ceros de esas funciones que yo llamé y con eso se hace un programa ejecutable completo. O sea, se genera toda la tira de unos y ceros que ejecuta mi programa. Por eso está esta separación entre compilador y encadenador. Pero lo importante acá es que entiendan este proceso de eso. Tengo el programa fuente, compilo, con eso obtengo los unos y ceros y el único chequeo que se hizo en el medio es sintáctico. Ahora, como decía en eso, si yo uso un montón de bibliotecas y uso un montón de funciones, lo que me va a pasar es que el programa ese binario va a crecer y va a ser muy grande. Y eso me va a traer problemas para que eso cargue en la memoria RAM. Entonces, en Windows, por ejemplo, en algún momento lo que se usaban son unas librerías dinámicas que se llamaban DLL, se siguen usando hasta hoy. Entonces, si yo llamaba esas rutinas que estaban en esa biblioteca y todo eso, en vez de traerme los unos y ceros y incrustárselos a mi código, lo que se hace es que se dejan como unas referencias pendientes y cuando va a ejecutar, llama a esa librería que ejecuta. Ese es el esquema que usa Windows, este otro esquema, perdón. Los dynamic Shared Object, creo que son de Linux. Bueno, esos son los compilados. Ahora, ¿cómo funcionan los interpretados? Nosotros vamos a trabajar con Octav, que es interpretado. En los lenguajes interpretados, lo que se hace es, se agarra ese texto que yo estoy escribiendo con el programa y voy a leer una única instrucción, voy a leer una sentencia sola. Esa se va a analizar otra vez, el chequeo, este sintáctico que les digo, o sea, ver que la instrucción sea correcta en el sentido de que respete las reglas del lenguaje. Si no está bien, me va a dar un mensaje de error. Me va a decir, no entiendo lo que escribiste. Corregilo, porque no se entiende esa instrucción y te va a dar algún tipo de ayuda de cuál es el error, que es lo que no está entendiendo. A veces ese error puede ser bastante difícil de identificar. Si la instrucción que yo le doy es correcta, digamos, en el sentido sintáctico, el intérprete la entiende, lo que va a hacer es ejecutarla. Y ahí va a pasar a esperar a leer la próxima sentencia. Entonces fíjense que esto es bastante distinto, a lo que dije hace un rato, porque en lo que hace un rato yo tenía mi archivo con mil líneas y lo que le hacían, las procesaba todas y generaba unos y ceros. En esto va a dar la primera línea, la va a tratar de ejecutar. ¿Puedo? Bien, voy a la segunda y nunca genero los unos y ceros, digamos, de alguna forma. Eso en general nos da un montón de ventaja porque nos permite prototipar programas. O sea, yo puedo escribir una instrucción y probarla, ver qué hace, escribir otra instrucción y probarla, ver qué hace. En los lenguajes compilados, lo que suele pasar es que si uno hace un programa largo de mil líneas de código y no los fue probando a poquito, le va a pasar que, capaz que cuando compila, le encuentra 40 errores. Y a veces es un poco difícil porque los errores se encadenan y los mensajes de error son muy difíciles de seguir. Si han visto a los estudiantes de computación haciendo entregas de P2 y de P3, eso les pasa todos los días, digamos. Están luchando contra el compilador y tratar de entender por qué no me compila. Nosotros vamos a usar este paradigma que, en general, es más sencillo, tiene algunas ventajas y tiene algunas desventajas. Ahora vamos a ver cuáles son. Bueno, primero cerremos esto de cómo funciona cada uno. Cuando yo hago un programa compilado, entonces, como yo estoy obteniendo los unos y ceros, termino con un programa ejecutable para eso. Bueno, o sea, si fueran Windows, ustedes van a terminar con un punto X en el que, si uno hiciera doble clic, va a ejecutar el programa de ustedes. Entonces, la interacción siempre es el hardware con el sistema y el programa que yo generé. Cuando yo trabajo con programas interpretados, yo voy a tener el hardware, el sistema operativo, y voy a necesitar tener el intérprete siempre. Y voy a usar mi archivo para ejecutar. O sea, para que ustedes puedan ejecutar octav, van a precisar una máquina que tenga instalado octav. Si no, no van a poder ejecutar el programa. Si ustedes hicieran la entrega o este código, este curso, perdón, lo hicieramos en C, ustedes con el ejecutable lo podrían copiar de una máquina a otra y ejecutarlo en otra. ¿Tá? ¿Se entendió de esto? Cuando yo tengo interpretado, siempre necesito el intérprete. Puede ser que este esquema les parezca un poco complejo y dice, bueno, pero sirve eso, se usa para algo. Bueno, los que tengan un máquina Windows y cada tanto les cargue y les diga, estoy actualizando el Java, y ese tipo de cosas, Java funciona así. Y fue un lenguaje que tuvo mucha incidencia como en la explosión de internet en las computadoras. ¿Por qué? Porque es esto lo mismo que hablábamos con el sistema operativo. Si yo tengo un intérprete instalado en cada máquina, o sea, yo doy la versión para que se pueda instalar, cualquier máquina soporta los programas que yo haga. Cuando yo genero un ejecutable, hay que ver si andan cualquier máquina. Ahora voy a explicar por qué a veces no andan en cualquier máquina. ¿Por qué no van a andar en cualquier máquina? Por lo que dice acá. O sea, yo necesito un código ejecutable para cada plataforma. ¿Te acuerdan cuando hablábamos de las máquinas de 32 bits y de 64 bits? Bueno, si yo lo generé de 64, no me andan. Si yo generé un ejecutable para Windows, en Linux no me andan. Si lo generé en Linux, en Windows no me andan. Entonces, cuando yo compilo, generé un ejecutable que va a funcionar en esa máquina y en máquinas similares. Si lo copio a otra de características distintas, ese archivo no anda. ¿Por qué? Porque esas tiras de unos y ceros, acuerdan ¿qué son instrucciones de la máquina? Cuando yo uso esas instrucciones de máquina en un contexto de Windows, entienden algunas instrucciones y otras no. Y cuando lo hago en Linux, hay otras que no se entienden cruzadas. ¿Qué ventajas tiene? Bueno, ya que dije, nombré primero una desventaja, voy a seguir con otra desventaja, que es que no es cómodo para modelar cuando yo no tengo el algoritmo. Es esto. Si yo quiero probar una idea, digo, a ver, ¿esto capaz que funciona? A ver, yo tengo que escribir un programa completo para poder ejecutarlo. No puedo probar dos líneas de código y ver qué hace. Entonces, no puedo prototypar fácil. Ahora, la gran ventaja que van a tener eso es que como ya tengo la cadena de unos y ceros, cuando yo ejecute un programa compilado, van a dar rapidísimo. Cuando yo trabaje con cosas interpretadas, en general van a ser más lentos, porque fíjense que cada vez que yo ejecuto, estoy convirtiendo las instrucciones. Estoy decidiendo... Esta instrucción quiere decir que tengo que hacer tal cosa. Esta instrucción está bien sintácticamente, tiene que hacer esta cosa. En el otro, yo ya generé todo el código junto y ya está. Lo bueno que tiene es que el programa es válido para cualquier plataforma con la que yo trabaje que tenga el intérprete. Acá ninguno tiene Linux, pero si no sé, fueran a hacer laboratorios, dos compañeros, uno tiene Windows, el otro tiene Linux, se pasan el archivo del programa y les van a dar en las dos máquinas. Lo único que tienen que tener es octav instalado en cada una de ellas. Y es mucho más fácil para hacer modelado y análisis de rápido de datos. O sea, yo tengo que trabajar sobre eso. Quiero analizar unos datos, ver... No sé si puedo hacer una regresión lineal entre un conjunto de datos. Le pido a ver, mostrarme cómo son estos datos, hacer minagráficas, hacer esto. Voy viendo cosas y tomando decisiones. En lo otro, yo tendría como que pensar todo a priori. En computación, obviamente, cuando hay estos paradigmas así que son tan opuestos, lo que se busca es tratar de hacer algo intermedio. Entonces, hay algunas soluciones de compromiso entre esas cosas para no tener que eso, o ser puramente compilados, o ser puramente interpretados. Entonces, por ejemplo, se compila hasta un nivel intermedio entre lenguaje de programación y lenguaje de máquina, y eso hace que el análisis sintáctico, o sea, si yo tengo algo puramente interpretado, cada vez hace el análisis sintáctico. Cuando hago este enfoque intermedio, en realidad ya el análisis sintáctico lo hice una vez sola, ya puedo chequear que las variables sean del tipo que tienen que ser, que esté haciendo las cosas razonablemente, y eso lo tengo que interpretar el código. Y otra solución de estas características es los compiladores que se llaman Just-In-Time, que básicamente lo que hacen es me generan un código compilado, pero chequean si yo el código fuente que dice es más nuevo o no. Si yo compilo una vez, si yo compilo una vez, ya tengo un ejecutable. Si yo no hice cambios, acá lo estamos pensando desde el lado interpretado, si yo no hice cambios sobre el archivo, no tiene sentido que reinterprete todo el archivo porque el ejecutable que genera me va a servir. Si en algún momento yo modifico algo en el archivo, él tiene que generar otro ejecutable, y eso se hace de alguna forma automáticamente. Java, esto que les decía que sirvió para el auge de Internet, usaba una máquina virtual Java, y en realidad era un código intermedio. Era este primero de los enfoques que yo les decía. O sea, el desarrollador en Java generaba ese código intermedio, que era lo que yo me bajaba en la máquina, y eso se ajustaba a mi máquina específica cuando yo ejecutaba. El segundo paradigma que les dije, este de los compiladores, Just in Time, es el que usa, por ejemplo, .NET hace ese tipo de cosas. O sea, se baja el código, genera un ejecutable, y si yo no cambio el código, usa siempre el mismo ejecutable. Matlab hoy en día hace eso, para que las optan todavía no, pero Matlab lo hace, que si yo escribo un programa, lo trata de convertir en un ejecutable, si yo no toco más el archivo, usa el ejecutable ese que generó, porque va a andar más rápido. No tiene que interpretar cada vez. Bueno, con eso dejamos por hoy el lunes, con Ernesto van a haber octavos, y conmigo retoman el lunes siguiente. Acuérdense que el miércoles no hay clase.